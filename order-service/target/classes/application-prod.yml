spring:
  r2dbc:
    url: ${SPRING_R2DBC_URL}
    username: ${SPRING_R2DBC_USERNAME}
    password: ${SPRING_R2DBC_PASSWORD}
  data:
    redis:
      host: ${SPRING_REDIS_HOST}
      port: ${SPRING_REDIS_PORT:6379}
  sql:
    init:
      mode: never

management:
  endpoints:
    web:
      exposure:
        include: health,metrics,prometheus
  metrics:
    export:
      prometheus:
        enabled: true
    distribution:
      percentiles-histogram:
        http.server.requests: true
        system.cpu.usage: true
        system.memory.used: true
  health:
    probes:
      enabled: true

order:
  service:
    strategy:
      default-strategy: atLeastOnce

redis:
  retry:
    max-attempts: ${REDIS_RETRY_MAX_ATTEMPTS:5}
    backoff:
      seconds: ${REDIS_RETRY_BACKOFF_SECONDS:2}
  stream:
    min-size: ${REDIS_STREAM_MIN_SIZE:1000}
    max-size: ${REDIS_STREAM_MAX_SIZE:100000}
    default-size: ${REDIS_STREAM_DEFAULT_SIZE:10000}
    trim:
      interval: ${REDIS_STREAM_TRIM_INTERVAL:300000}

outbox:
  retry:
    max-attempts: ${OUTBOX_RETRY_MAX_ATTEMPTS:5}
    backoff:
      seconds: ${OUTBOX_RETRY_BACKOFF_SECONDS:2}

dlq:
  retry:
    max-attempts: ${DLQ_RETRY_MAX_ATTEMPTS:5}
    backoff:
      seconds: ${DLQ_RETRY_BACKOFF_SECONDS:2}
  process:
    interval: ${DLQ_PROCESS_INTERVAL:60000}

event:
  persistence:
    topics:
      orders:
        persistToDisk: ${EVENT_PERSISTENCE_ORDERS_PERSIST_TO_DISK:true}
        importance: ${EVENT_PERSISTENCE_ORDERS_IMPORTANCE:HIGH}
      other-topic:
        persistToDisk: ${EVENT_PERSISTENCE_OTHER_TOPIC_PERSIST_TO_DISK:false}
        importance: ${EVENT_PERSISTENCE_OTHER_TOPIC_IMPORTANCE:LOW}

logging:
  level:
    root: ${LOG_LEVEL_ROOT:INFO}
    com.example.order: ${LOG_LEVEL_APP:INFO}
    org.springframework: ${LOG_LEVEL_SPRING:WARN}

app:
  id:
    check-collisions: ${APP_ID_CHECK_COLLISIONS:false}  # Desactivado por defecto en producci√≥n para rendimiento
  node-id: ${APP_NODE_ID:0}  # Configurable para entornos multi-nodo

resilience4j:
  fallback:
    enabled: true