<?xml version="1.0" encoding="UTF-8"?>
<testsuite xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report-3.0.xsd" version="3.0" name="com.example.order.service.OrderServiceUnitTest" time="0.54" tests="26" errors="26" skipped="0" failures="0">
  <properties>
    <property name="java.specification.version" value="21"/>
    <property name="sun.jnu.encoding" value="UTF-8"/>
    <property name="java.class.path" value="/Users/aironman/git/distributed-order-system/order-service/target/test-classes:/Users/aironman/git/distributed-order-system/order-service/target/classes:/Users/aironman/.m2/repository/org/springframework/boot/spring-boot-starter-webflux/3.4.4/spring-boot-starter-webflux-3.4.4.jar:/Users/aironman/.m2/repository/org/springframework/boot/spring-boot-starter/3.4.4/spring-boot-starter-3.4.4.jar:/Users/aironman/.m2/repository/org/springframework/boot/spring-boot/3.4.4/spring-boot-3.4.4.jar:/Users/aironman/.m2/repository/org/springframework/boot/spring-boot-autoconfigure/3.4.4/spring-boot-autoconfigure-3.4.4.jar:/Users/aironman/.m2/repository/org/springframework/boot/spring-boot-starter-logging/3.4.4/spring-boot-starter-logging-3.4.4.jar:/Users/aironman/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.24.3/log4j-to-slf4j-2.24.3.jar:/Users/aironman/.m2/repository/org/apache/logging/log4j/log4j-api/2.24.3/log4j-api-2.24.3.jar:/Users/aironman/.m2/repository/org/slf4j/jul-to-slf4j/2.0.17/jul-to-slf4j-2.0.17.jar:/Users/aironman/.m2/repository/jakarta/annotation/jakarta.annotation-api/2.1.1/jakarta.annotation-api-2.1.1.jar:/Users/aironman/.m2/repository/org/yaml/snakeyaml/2.3/snakeyaml-2.3.jar:/Users/aironman/.m2/repository/org/springframework/boot/spring-boot-starter-json/3.4.4/spring-boot-starter-json-3.4.4.jar:/Users/aironman/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.18.3/jackson-databind-2.18.3.jar:/Users/aironman/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.18.3/jackson-core-2.18.3.jar:/Users/aironman/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.18.3/jackson-datatype-jdk8-2.18.3.jar:/Users/aironman/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.18.3/jackson-datatype-jsr310-2.18.3.jar:/Users/aironman/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.18.3/jackson-module-parameter-names-2.18.3.jar:/Users/aironman/.m2/repository/org/springframework/boot/spring-boot-starter-reactor-netty/3.4.4/spring-boot-starter-reactor-netty-3.4.4.jar:/Users/aironman/.m2/repository/io/projectreactor/netty/reactor-netty-http/1.2.4/reactor-netty-http-1.2.4.jar:/Users/aironman/.m2/repository/io/netty/netty-codec-http/4.1.119.Final/netty-codec-http-4.1.119.Final.jar:/Users/aironman/.m2/repository/io/netty/netty-codec-http2/4.1.119.Final/netty-codec-http2-4.1.119.Final.jar:/Users/aironman/.m2/repository/org/springframework/spring-web/6.2.5/spring-web-6.2.5.jar:/Users/aironman/.m2/repository/org/springframework/spring-beans/6.2.5/spring-beans-6.2.5.jar:/Users/aironman/.m2/repository/org/springframework/spring-webflux/6.2.5/spring-webflux-6.2.5.jar:/Users/aironman/.m2/repository/org/springframework/boot/spring-boot-starter-data-r2dbc/3.4.4/spring-boot-starter-data-r2dbc-3.4.4.jar:/Users/aironman/.m2/repository/org/springframework/data/spring-data-r2dbc/3.4.4/spring-data-r2dbc-3.4.4.jar:/Users/aironman/.m2/repository/org/springframework/data/spring-data-relational/3.4.4/spring-data-relational-3.4.4.jar:/Users/aironman/.m2/repository/org/springframework/data/spring-data-commons/3.4.4/spring-data-commons-3.4.4.jar:/Users/aironman/.m2/repository/org/springframework/spring-tx/6.2.5/spring-tx-6.2.5.jar:/Users/aironman/.m2/repository/org/springframework/spring-context/6.2.5/spring-context-6.2.5.jar:/Users/aironman/.m2/repository/org/springframework/spring-expression/6.2.5/spring-expression-6.2.5.jar:/Users/aironman/.m2/repository/org/springframework/spring-jdbc/6.2.5/spring-jdbc-6.2.5.jar:/Users/aironman/.m2/repository/org/springframework/spring-r2dbc/6.2.5/spring-r2dbc-6.2.5.jar:/Users/aironman/.m2/repository/io/r2dbc/r2dbc-spi/1.0.0.RELEASE/r2dbc-spi-1.0.0.RELEASE.jar:/Users/aironman/.m2/repository/io/r2dbc/r2dbc-pool/1.0.2.RELEASE/r2dbc-pool-1.0.2.RELEASE.jar:/Users/aironman/.m2/repository/io/projectreactor/addons/reactor-pool/1.1.2/reactor-pool-1.1.2.jar:/Users/aironman/.m2/repository/org/springframework/boot/spring-boot-starter-data-redis-reactive/3.4.4/spring-boot-starter-data-redis-reactive-3.4.4.jar:/Users/aironman/.m2/repository/io/lettuce/lettuce-core/6.4.2.RELEASE/lettuce-core-6.4.2.RELEASE.jar:/Users/aironman/.m2/repository/io/netty/netty-common/4.1.119.Final/netty-common-4.1.119.Final.jar:/Users/aironman/.m2/repository/io/netty/netty-handler/4.1.119.Final/netty-handler-4.1.119.Final.jar:/Users/aironman/.m2/repository/io/netty/netty-resolver/4.1.119.Final/netty-resolver-4.1.119.Final.jar:/Users/aironman/.m2/repository/io/netty/netty-buffer/4.1.119.Final/netty-buffer-4.1.119.Final.jar:/Users/aironman/.m2/repository/io/netty/netty-transport-native-unix-common/4.1.119.Final/netty-transport-native-unix-common-4.1.119.Final.jar:/Users/aironman/.m2/repository/io/netty/netty-codec/4.1.119.Final/netty-codec-4.1.119.Final.jar:/Users/aironman/.m2/repository/io/netty/netty-transport/4.1.119.Final/netty-transport-4.1.119.Final.jar:/Users/aironman/.m2/repository/org/springframework/data/spring-data-redis/3.4.4/spring-data-redis-3.4.4.jar:/Users/aironman/.m2/repository/org/springframework/data/spring-data-keyvalue/3.4.4/spring-data-keyvalue-3.4.4.jar:/Users/aironman/.m2/repository/org/springframework/spring-oxm/6.2.5/spring-oxm-6.2.5.jar:/Users/aironman/.m2/repository/org/springframework/spring-aop/6.2.5/spring-aop-6.2.5.jar:/Users/aironman/.m2/repository/org/springframework/spring-context-support/6.2.5/spring-context-support-6.2.5.jar:/Users/aironman/.m2/repository/org/springframework/boot/spring-boot-starter-actuator/3.4.4/spring-boot-starter-actuator-3.4.4.jar:/Users/aironman/.m2/repository/org/springframework/boot/spring-boot-actuator-autoconfigure/3.4.4/spring-boot-actuator-autoconfigure-3.4.4.jar:/Users/aironman/.m2/repository/org/springframework/boot/spring-boot-actuator/3.4.4/spring-boot-actuator-3.4.4.jar:/Users/aironman/.m2/repository/io/micrometer/micrometer-observation/1.14.5/micrometer-observation-1.14.5.jar:/Users/aironman/.m2/repository/io/micrometer/micrometer-commons/1.14.5/micrometer-commons-1.14.5.jar:/Users/aironman/.m2/repository/io/micrometer/micrometer-jakarta9/1.14.5/micrometer-jakarta9-1.14.5.jar:/Users/aironman/.m2/repository/io/asyncer/r2dbc-mysql/1.4.1/r2dbc-mysql-1.4.1.jar:/Users/aironman/.m2/repository/io/projectreactor/netty/reactor-netty-core/1.2.4/reactor-netty-core-1.2.4.jar:/Users/aironman/.m2/repository/io/netty/netty-handler-proxy/4.1.119.Final/netty-handler-proxy-4.1.119.Final.jar:/Users/aironman/.m2/repository/io/netty/netty-codec-socks/4.1.119.Final/netty-codec-socks-4.1.119.Final.jar:/Users/aironman/.m2/repository/io/netty/netty-resolver-dns/4.1.119.Final/netty-resolver-dns-4.1.119.Final.jar:/Users/aironman/.m2/repository/io/netty/netty-codec-dns/4.1.119.Final/netty-codec-dns-4.1.119.Final.jar:/Users/aironman/.m2/repository/io/netty/netty-resolver-dns-native-macos/4.1.119.Final/netty-resolver-dns-native-macos-4.1.119.Final-osx-x86_64.jar:/Users/aironman/.m2/repository/io/netty/netty-resolver-dns-classes-macos/4.1.119.Final/netty-resolver-dns-classes-macos-4.1.119.Final.jar:/Users/aironman/.m2/repository/io/netty/netty-transport-native-epoll/4.1.119.Final/netty-transport-native-epoll-4.1.119.Final-linux-x86_64.jar:/Users/aironman/.m2/repository/io/netty/netty-transport-classes-epoll/4.1.119.Final/netty-transport-classes-epoll-4.1.119.Final.jar:/Users/aironman/.m2/repository/com/mysql/mysql-connector-j/9.1.0/mysql-connector-j-9.1.0.jar:/Users/aironman/.m2/repository/org/codehaus/janino/janino/3.1.12/janino-3.1.12.jar:/Users/aironman/.m2/repository/org/codehaus/janino/commons-compiler/3.1.12/commons-compiler-3.1.12.jar:/Users/aironman/.m2/repository/io/github/resilience4j/resilience4j-spring-boot3/2.3.0/resilience4j-spring-boot3-2.3.0.jar:/Users/aironman/.m2/repository/io/github/resilience4j/resilience4j-spring6/2.3.0/resilience4j-spring6-2.3.0.jar:/Users/aironman/.m2/repository/io/github/resilience4j/resilience4j-annotations/2.3.0/resilience4j-annotations-2.3.0.jar:/Users/aironman/.m2/repository/io/github/resilience4j/resilience4j-consumer/2.3.0/resilience4j-consumer-2.3.0.jar:/Users/aironman/.m2/repository/io/github/resilience4j/resilience4j-circularbuffer/2.3.0/resilience4j-circularbuffer-2.3.0.jar:/Users/aironman/.m2/repository/io/github/resilience4j/resilience4j-framework-common/2.3.0/resilience4j-framework-common-2.3.0.jar:/Users/aironman/.m2/repository/io/github/resilience4j/resilience4j-micrometer/2.3.0/resilience4j-micrometer-2.3.0.jar:/Users/aironman/.m2/repository/io/github/resilience4j/resilience4j-circuitbreaker/2.3.0/resilience4j-circuitbreaker-2.3.0.jar:/Users/aironman/.m2/repository/io/github/resilience4j/resilience4j-core/2.3.0/resilience4j-core-2.3.0.jar:/Users/aironman/.m2/repository/org/jetbrains/kotlin/kotlin-stdlib-jdk8/1.9.25/kotlin-stdlib-jdk8-1.9.25.jar:/Users/aironman/.m2/repository/org/jetbrains/kotlin/kotlin-stdlib/1.9.25/kotlin-stdlib-1.9.25.jar:/Users/aironman/.m2/repository/org/jetbrains/kotlin/kotlin-stdlib-jdk7/1.9.25/kotlin-stdlib-jdk7-1.9.25.jar:/Users/aironman/.m2/repository/io/github/resilience4j/resilience4j-reactor/2.3.0/resilience4j-reactor-2.3.0.jar:/Users/aironman/.m2/repository/io/github/resilience4j/resilience4j-ratelimiter/2.3.0/resilience4j-ratelimiter-2.3.0.jar:/Users/aironman/.m2/repository/io/github/resilience4j/resilience4j-timelimiter/2.3.0/resilience4j-timelimiter-2.3.0.jar:/Users/aironman/.m2/repository/io/github/resilience4j/resilience4j-bulkhead/2.3.0/resilience4j-bulkhead-2.3.0.jar:/Users/aironman/.m2/repository/io/github/resilience4j/resilience4j-retry/2.3.0/resilience4j-retry-2.3.0.jar:/Users/aironman/.m2/repository/io/projectreactor/reactor-core/3.6.10/reactor-core-3.6.10.jar:/Users/aironman/.m2/repository/org/reactivestreams/reactive-streams/1.0.4/reactive-streams-1.0.4.jar:/Users/aironman/.m2/repository/io/micrometer/micrometer-registry-prometheus/1.12.4/micrometer-registry-prometheus-1.12.4.jar:/Users/aironman/.m2/repository/io/micrometer/micrometer-core/1.14.5/micrometer-core-1.14.5.jar:/Users/aironman/.m2/repository/org/hdrhistogram/HdrHistogram/2.2.2/HdrHistogram-2.2.2.jar:/Users/aironman/.m2/repository/org/latencyutils/LatencyUtils/2.0.3/LatencyUtils-2.0.3.jar:/Users/aironman/.m2/repository/io/prometheus/simpleclient_common/0.16.0/simpleclient_common-0.16.0.jar:/Users/aironman/.m2/repository/io/prometheus/simpleclient/0.16.0/simpleclient-0.16.0.jar:/Users/aironman/.m2/repository/io/prometheus/simpleclient_tracer_otel/0.16.0/simpleclient_tracer_otel-0.16.0.jar:/Users/aironman/.m2/repository/io/prometheus/simpleclient_tracer_common/0.16.0/simpleclient_tracer_common-0.16.0.jar:/Users/aironman/.m2/repository/io/prometheus/simpleclient_tracer_otel_agent/0.16.0/simpleclient_tracer_otel_agent-0.16.0.jar:/Users/aironman/.m2/repository/org/slf4j/slf4j-api/2.0.17/slf4j-api-2.0.17.jar:/Users/aironman/.m2/repository/ch/qos/logback/logback-classic/1.5.13/logback-classic-1.5.13.jar:/Users/aironman/.m2/repository/ch/qos/logback/logback-core/1.5.13/logback-core-1.5.13.jar:/Users/aironman/.m2/repository/org/projectlombok/lombok/1.18.34/lombok-1.18.34.jar:/Users/aironman/.m2/repository/org/springframework/boot/spring-boot-starter-test/3.4.4/spring-boot-starter-test-3.4.4.jar:/Users/aironman/.m2/repository/org/springframework/boot/spring-boot-test/3.4.4/spring-boot-test-3.4.4.jar:/Users/aironman/.m2/repository/org/springframework/boot/spring-boot-test-autoconfigure/3.4.4/spring-boot-test-autoconfigure-3.4.4.jar:/Users/aironman/.m2/repository/com/jayway/jsonpath/json-path/2.9.0/json-path-2.9.0.jar:/Users/aironman/.m2/repository/jakarta/xml/bind/jakarta.xml.bind-api/4.0.2/jakarta.xml.bind-api-4.0.2.jar:/Users/aironman/.m2/repository/jakarta/activation/jakarta.activation-api/2.1.3/jakarta.activation-api-2.1.3.jar:/Users/aironman/.m2/repository/net/minidev/json-smart/2.5.2/json-smart-2.5.2.jar:/Users/aironman/.m2/repository/net/minidev/accessors-smart/2.5.2/accessors-smart-2.5.2.jar:/Users/aironman/.m2/repository/org/ow2/asm/asm/9.7.1/asm-9.7.1.jar:/Users/aironman/.m2/repository/org/assertj/assertj-core/3.26.3/assertj-core-3.26.3.jar:/Users/aironman/.m2/repository/org/awaitility/awaitility/4.2.2/awaitility-4.2.2.jar:/Users/aironman/.m2/repository/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:/Users/aironman/.m2/repository/org/junit/jupiter/junit-jupiter/5.11.4/junit-jupiter-5.11.4.jar:/Users/aironman/.m2/repository/org/junit/jupiter/junit-jupiter-params/5.11.4/junit-jupiter-params-5.11.4.jar:/Users/aironman/.m2/repository/org/junit/jupiter/junit-jupiter-engine/5.11.4/junit-jupiter-engine-5.11.4.jar:/Users/aironman/.m2/repository/org/junit/platform/junit-platform-engine/1.11.4/junit-platform-engine-1.11.4.jar:/Users/aironman/.m2/repository/org/skyscreamer/jsonassert/1.5.3/jsonassert-1.5.3.jar:/Users/aironman/.m2/repository/com/vaadin/external/google/android-json/0.0.20131108.vaadin1/android-json-0.0.20131108.vaadin1.jar:/Users/aironman/.m2/repository/org/springframework/spring-core/6.2.5/spring-core-6.2.5.jar:/Users/aironman/.m2/repository/org/springframework/spring-jcl/6.2.5/spring-jcl-6.2.5.jar:/Users/aironman/.m2/repository/org/springframework/spring-test/6.2.5/spring-test-6.2.5.jar:/Users/aironman/.m2/repository/org/xmlunit/xmlunit-core/2.10.0/xmlunit-core-2.10.0.jar:/Users/aironman/.m2/repository/io/projectreactor/reactor-test/3.6.10/reactor-test-3.6.10.jar:/Users/aironman/.m2/repository/org/testcontainers/testcontainers/1.21.0/testcontainers-1.21.0.jar:/Users/aironman/.m2/repository/junit/junit/4.13.2/junit-4.13.2.jar:/Users/aironman/.m2/repository/org/hamcrest/hamcrest-core/2.2/hamcrest-core-2.2.jar:/Users/aironman/.m2/repository/org/apache/commons/commons-compress/1.24.0/commons-compress-1.24.0.jar:/Users/aironman/.m2/repository/org/rnorth/duct-tape/duct-tape/1.0.8/duct-tape-1.0.8.jar:/Users/aironman/.m2/repository/org/jetbrains/annotations/17.0.0/annotations-17.0.0.jar:/Users/aironman/.m2/repository/com/github/docker-java/docker-java-api/3.4.2/docker-java-api-3.4.2.jar:/Users/aironman/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.18.3/jackson-annotations-2.18.3.jar:/Users/aironman/.m2/repository/com/github/docker-java/docker-java-transport-zerodep/3.4.2/docker-java-transport-zerodep-3.4.2.jar:/Users/aironman/.m2/repository/com/github/docker-java/docker-java-transport/3.4.2/docker-java-transport-3.4.2.jar:/Users/aironman/.m2/repository/net/java/dev/jna/jna/5.13.0/jna-5.13.0.jar:/Users/aironman/.m2/repository/org/testcontainers/mysql/1.20.1/mysql-1.20.1.jar:/Users/aironman/.m2/repository/org/testcontainers/jdbc/1.20.6/jdbc-1.20.6.jar:/Users/aironman/.m2/repository/org/testcontainers/database-commons/1.20.6/database-commons-1.20.6.jar:/Users/aironman/.m2/repository/org/testcontainers/junit-jupiter/1.20.1/junit-jupiter-1.20.1.jar:/Users/aironman/.m2/repository/org/mockito/mockito-core/5.14.1/mockito-core-5.14.1.jar:/Users/aironman/.m2/repository/net/bytebuddy/byte-buddy/1.15.11/byte-buddy-1.15.11.jar:/Users/aironman/.m2/repository/net/bytebuddy/byte-buddy-agent/1.15.11/byte-buddy-agent-1.15.11.jar:/Users/aironman/.m2/repository/org/objenesis/objenesis/3.3/objenesis-3.3.jar:/Users/aironman/.m2/repository/org/mockito/mockito-junit-jupiter/5.14.1/mockito-junit-jupiter-5.14.1.jar:/Users/aironman/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.11.4/junit-jupiter-api-5.11.4.jar:/Users/aironman/.m2/repository/org/opentest4j/opentest4j/1.3.0/opentest4j-1.3.0.jar:/Users/aironman/.m2/repository/org/junit/platform/junit-platform-commons/1.11.4/junit-platform-commons-1.11.4.jar:/Users/aironman/.m2/repository/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar:"/>
    <property name="java.vm.vendor" value="Eclipse Adoptium"/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="java.vendor.url" value="https://adoptium.net/"/>
    <property name="user.timezone" value="Europe/Madrid"/>
    <property name="os.name" value="Mac OS X"/>
    <property name="java.vm.specification.version" value="21"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="user.country" value="ES"/>
    <property name="sun.boot.library.path" value="/Users/aironman/.sdkman/candidates/java/21.0.6-tem/lib"/>
    <property name="sun.java.command" value="/Users/aironman/git/distributed-order-system/order-service/target/surefire/surefirebooter-20250429145153490_3.jar /Users/aironman/git/distributed-order-system/order-service/target/surefire 2025-04-29T14-51-53_403-jvmRun1 surefire-20250429145153490_1tmp surefire_0-20250429145153490_2tmp"/>
    <property name="http.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
    <property name="jdk.debug" value="release"/>
    <property name="surefire.test.class.path" value="/Users/aironman/git/distributed-order-system/order-service/target/test-classes:/Users/aironman/git/distributed-order-system/order-service/target/classes:/Users/aironman/.m2/repository/org/springframework/boot/spring-boot-starter-webflux/3.4.4/spring-boot-starter-webflux-3.4.4.jar:/Users/aironman/.m2/repository/org/springframework/boot/spring-boot-starter/3.4.4/spring-boot-starter-3.4.4.jar:/Users/aironman/.m2/repository/org/springframework/boot/spring-boot/3.4.4/spring-boot-3.4.4.jar:/Users/aironman/.m2/repository/org/springframework/boot/spring-boot-autoconfigure/3.4.4/spring-boot-autoconfigure-3.4.4.jar:/Users/aironman/.m2/repository/org/springframework/boot/spring-boot-starter-logging/3.4.4/spring-boot-starter-logging-3.4.4.jar:/Users/aironman/.m2/repository/org/apache/logging/log4j/log4j-to-slf4j/2.24.3/log4j-to-slf4j-2.24.3.jar:/Users/aironman/.m2/repository/org/apache/logging/log4j/log4j-api/2.24.3/log4j-api-2.24.3.jar:/Users/aironman/.m2/repository/org/slf4j/jul-to-slf4j/2.0.17/jul-to-slf4j-2.0.17.jar:/Users/aironman/.m2/repository/jakarta/annotation/jakarta.annotation-api/2.1.1/jakarta.annotation-api-2.1.1.jar:/Users/aironman/.m2/repository/org/yaml/snakeyaml/2.3/snakeyaml-2.3.jar:/Users/aironman/.m2/repository/org/springframework/boot/spring-boot-starter-json/3.4.4/spring-boot-starter-json-3.4.4.jar:/Users/aironman/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.18.3/jackson-databind-2.18.3.jar:/Users/aironman/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.18.3/jackson-core-2.18.3.jar:/Users/aironman/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jdk8/2.18.3/jackson-datatype-jdk8-2.18.3.jar:/Users/aironman/.m2/repository/com/fasterxml/jackson/datatype/jackson-datatype-jsr310/2.18.3/jackson-datatype-jsr310-2.18.3.jar:/Users/aironman/.m2/repository/com/fasterxml/jackson/module/jackson-module-parameter-names/2.18.3/jackson-module-parameter-names-2.18.3.jar:/Users/aironman/.m2/repository/org/springframework/boot/spring-boot-starter-reactor-netty/3.4.4/spring-boot-starter-reactor-netty-3.4.4.jar:/Users/aironman/.m2/repository/io/projectreactor/netty/reactor-netty-http/1.2.4/reactor-netty-http-1.2.4.jar:/Users/aironman/.m2/repository/io/netty/netty-codec-http/4.1.119.Final/netty-codec-http-4.1.119.Final.jar:/Users/aironman/.m2/repository/io/netty/netty-codec-http2/4.1.119.Final/netty-codec-http2-4.1.119.Final.jar:/Users/aironman/.m2/repository/org/springframework/spring-web/6.2.5/spring-web-6.2.5.jar:/Users/aironman/.m2/repository/org/springframework/spring-beans/6.2.5/spring-beans-6.2.5.jar:/Users/aironman/.m2/repository/org/springframework/spring-webflux/6.2.5/spring-webflux-6.2.5.jar:/Users/aironman/.m2/repository/org/springframework/boot/spring-boot-starter-data-r2dbc/3.4.4/spring-boot-starter-data-r2dbc-3.4.4.jar:/Users/aironman/.m2/repository/org/springframework/data/spring-data-r2dbc/3.4.4/spring-data-r2dbc-3.4.4.jar:/Users/aironman/.m2/repository/org/springframework/data/spring-data-relational/3.4.4/spring-data-relational-3.4.4.jar:/Users/aironman/.m2/repository/org/springframework/data/spring-data-commons/3.4.4/spring-data-commons-3.4.4.jar:/Users/aironman/.m2/repository/org/springframework/spring-tx/6.2.5/spring-tx-6.2.5.jar:/Users/aironman/.m2/repository/org/springframework/spring-context/6.2.5/spring-context-6.2.5.jar:/Users/aironman/.m2/repository/org/springframework/spring-expression/6.2.5/spring-expression-6.2.5.jar:/Users/aironman/.m2/repository/org/springframework/spring-jdbc/6.2.5/spring-jdbc-6.2.5.jar:/Users/aironman/.m2/repository/org/springframework/spring-r2dbc/6.2.5/spring-r2dbc-6.2.5.jar:/Users/aironman/.m2/repository/io/r2dbc/r2dbc-spi/1.0.0.RELEASE/r2dbc-spi-1.0.0.RELEASE.jar:/Users/aironman/.m2/repository/io/r2dbc/r2dbc-pool/1.0.2.RELEASE/r2dbc-pool-1.0.2.RELEASE.jar:/Users/aironman/.m2/repository/io/projectreactor/addons/reactor-pool/1.1.2/reactor-pool-1.1.2.jar:/Users/aironman/.m2/repository/org/springframework/boot/spring-boot-starter-data-redis-reactive/3.4.4/spring-boot-starter-data-redis-reactive-3.4.4.jar:/Users/aironman/.m2/repository/io/lettuce/lettuce-core/6.4.2.RELEASE/lettuce-core-6.4.2.RELEASE.jar:/Users/aironman/.m2/repository/io/netty/netty-common/4.1.119.Final/netty-common-4.1.119.Final.jar:/Users/aironman/.m2/repository/io/netty/netty-handler/4.1.119.Final/netty-handler-4.1.119.Final.jar:/Users/aironman/.m2/repository/io/netty/netty-resolver/4.1.119.Final/netty-resolver-4.1.119.Final.jar:/Users/aironman/.m2/repository/io/netty/netty-buffer/4.1.119.Final/netty-buffer-4.1.119.Final.jar:/Users/aironman/.m2/repository/io/netty/netty-transport-native-unix-common/4.1.119.Final/netty-transport-native-unix-common-4.1.119.Final.jar:/Users/aironman/.m2/repository/io/netty/netty-codec/4.1.119.Final/netty-codec-4.1.119.Final.jar:/Users/aironman/.m2/repository/io/netty/netty-transport/4.1.119.Final/netty-transport-4.1.119.Final.jar:/Users/aironman/.m2/repository/org/springframework/data/spring-data-redis/3.4.4/spring-data-redis-3.4.4.jar:/Users/aironman/.m2/repository/org/springframework/data/spring-data-keyvalue/3.4.4/spring-data-keyvalue-3.4.4.jar:/Users/aironman/.m2/repository/org/springframework/spring-oxm/6.2.5/spring-oxm-6.2.5.jar:/Users/aironman/.m2/repository/org/springframework/spring-aop/6.2.5/spring-aop-6.2.5.jar:/Users/aironman/.m2/repository/org/springframework/spring-context-support/6.2.5/spring-context-support-6.2.5.jar:/Users/aironman/.m2/repository/org/springframework/boot/spring-boot-starter-actuator/3.4.4/spring-boot-starter-actuator-3.4.4.jar:/Users/aironman/.m2/repository/org/springframework/boot/spring-boot-actuator-autoconfigure/3.4.4/spring-boot-actuator-autoconfigure-3.4.4.jar:/Users/aironman/.m2/repository/org/springframework/boot/spring-boot-actuator/3.4.4/spring-boot-actuator-3.4.4.jar:/Users/aironman/.m2/repository/io/micrometer/micrometer-observation/1.14.5/micrometer-observation-1.14.5.jar:/Users/aironman/.m2/repository/io/micrometer/micrometer-commons/1.14.5/micrometer-commons-1.14.5.jar:/Users/aironman/.m2/repository/io/micrometer/micrometer-jakarta9/1.14.5/micrometer-jakarta9-1.14.5.jar:/Users/aironman/.m2/repository/io/asyncer/r2dbc-mysql/1.4.1/r2dbc-mysql-1.4.1.jar:/Users/aironman/.m2/repository/io/projectreactor/netty/reactor-netty-core/1.2.4/reactor-netty-core-1.2.4.jar:/Users/aironman/.m2/repository/io/netty/netty-handler-proxy/4.1.119.Final/netty-handler-proxy-4.1.119.Final.jar:/Users/aironman/.m2/repository/io/netty/netty-codec-socks/4.1.119.Final/netty-codec-socks-4.1.119.Final.jar:/Users/aironman/.m2/repository/io/netty/netty-resolver-dns/4.1.119.Final/netty-resolver-dns-4.1.119.Final.jar:/Users/aironman/.m2/repository/io/netty/netty-codec-dns/4.1.119.Final/netty-codec-dns-4.1.119.Final.jar:/Users/aironman/.m2/repository/io/netty/netty-resolver-dns-native-macos/4.1.119.Final/netty-resolver-dns-native-macos-4.1.119.Final-osx-x86_64.jar:/Users/aironman/.m2/repository/io/netty/netty-resolver-dns-classes-macos/4.1.119.Final/netty-resolver-dns-classes-macos-4.1.119.Final.jar:/Users/aironman/.m2/repository/io/netty/netty-transport-native-epoll/4.1.119.Final/netty-transport-native-epoll-4.1.119.Final-linux-x86_64.jar:/Users/aironman/.m2/repository/io/netty/netty-transport-classes-epoll/4.1.119.Final/netty-transport-classes-epoll-4.1.119.Final.jar:/Users/aironman/.m2/repository/com/mysql/mysql-connector-j/9.1.0/mysql-connector-j-9.1.0.jar:/Users/aironman/.m2/repository/org/codehaus/janino/janino/3.1.12/janino-3.1.12.jar:/Users/aironman/.m2/repository/org/codehaus/janino/commons-compiler/3.1.12/commons-compiler-3.1.12.jar:/Users/aironman/.m2/repository/io/github/resilience4j/resilience4j-spring-boot3/2.3.0/resilience4j-spring-boot3-2.3.0.jar:/Users/aironman/.m2/repository/io/github/resilience4j/resilience4j-spring6/2.3.0/resilience4j-spring6-2.3.0.jar:/Users/aironman/.m2/repository/io/github/resilience4j/resilience4j-annotations/2.3.0/resilience4j-annotations-2.3.0.jar:/Users/aironman/.m2/repository/io/github/resilience4j/resilience4j-consumer/2.3.0/resilience4j-consumer-2.3.0.jar:/Users/aironman/.m2/repository/io/github/resilience4j/resilience4j-circularbuffer/2.3.0/resilience4j-circularbuffer-2.3.0.jar:/Users/aironman/.m2/repository/io/github/resilience4j/resilience4j-framework-common/2.3.0/resilience4j-framework-common-2.3.0.jar:/Users/aironman/.m2/repository/io/github/resilience4j/resilience4j-micrometer/2.3.0/resilience4j-micrometer-2.3.0.jar:/Users/aironman/.m2/repository/io/github/resilience4j/resilience4j-circuitbreaker/2.3.0/resilience4j-circuitbreaker-2.3.0.jar:/Users/aironman/.m2/repository/io/github/resilience4j/resilience4j-core/2.3.0/resilience4j-core-2.3.0.jar:/Users/aironman/.m2/repository/org/jetbrains/kotlin/kotlin-stdlib-jdk8/1.9.25/kotlin-stdlib-jdk8-1.9.25.jar:/Users/aironman/.m2/repository/org/jetbrains/kotlin/kotlin-stdlib/1.9.25/kotlin-stdlib-1.9.25.jar:/Users/aironman/.m2/repository/org/jetbrains/kotlin/kotlin-stdlib-jdk7/1.9.25/kotlin-stdlib-jdk7-1.9.25.jar:/Users/aironman/.m2/repository/io/github/resilience4j/resilience4j-reactor/2.3.0/resilience4j-reactor-2.3.0.jar:/Users/aironman/.m2/repository/io/github/resilience4j/resilience4j-ratelimiter/2.3.0/resilience4j-ratelimiter-2.3.0.jar:/Users/aironman/.m2/repository/io/github/resilience4j/resilience4j-timelimiter/2.3.0/resilience4j-timelimiter-2.3.0.jar:/Users/aironman/.m2/repository/io/github/resilience4j/resilience4j-bulkhead/2.3.0/resilience4j-bulkhead-2.3.0.jar:/Users/aironman/.m2/repository/io/github/resilience4j/resilience4j-retry/2.3.0/resilience4j-retry-2.3.0.jar:/Users/aironman/.m2/repository/io/projectreactor/reactor-core/3.6.10/reactor-core-3.6.10.jar:/Users/aironman/.m2/repository/org/reactivestreams/reactive-streams/1.0.4/reactive-streams-1.0.4.jar:/Users/aironman/.m2/repository/io/micrometer/micrometer-registry-prometheus/1.12.4/micrometer-registry-prometheus-1.12.4.jar:/Users/aironman/.m2/repository/io/micrometer/micrometer-core/1.14.5/micrometer-core-1.14.5.jar:/Users/aironman/.m2/repository/org/hdrhistogram/HdrHistogram/2.2.2/HdrHistogram-2.2.2.jar:/Users/aironman/.m2/repository/org/latencyutils/LatencyUtils/2.0.3/LatencyUtils-2.0.3.jar:/Users/aironman/.m2/repository/io/prometheus/simpleclient_common/0.16.0/simpleclient_common-0.16.0.jar:/Users/aironman/.m2/repository/io/prometheus/simpleclient/0.16.0/simpleclient-0.16.0.jar:/Users/aironman/.m2/repository/io/prometheus/simpleclient_tracer_otel/0.16.0/simpleclient_tracer_otel-0.16.0.jar:/Users/aironman/.m2/repository/io/prometheus/simpleclient_tracer_common/0.16.0/simpleclient_tracer_common-0.16.0.jar:/Users/aironman/.m2/repository/io/prometheus/simpleclient_tracer_otel_agent/0.16.0/simpleclient_tracer_otel_agent-0.16.0.jar:/Users/aironman/.m2/repository/org/slf4j/slf4j-api/2.0.17/slf4j-api-2.0.17.jar:/Users/aironman/.m2/repository/ch/qos/logback/logback-classic/1.5.13/logback-classic-1.5.13.jar:/Users/aironman/.m2/repository/ch/qos/logback/logback-core/1.5.13/logback-core-1.5.13.jar:/Users/aironman/.m2/repository/org/projectlombok/lombok/1.18.34/lombok-1.18.34.jar:/Users/aironman/.m2/repository/org/springframework/boot/spring-boot-starter-test/3.4.4/spring-boot-starter-test-3.4.4.jar:/Users/aironman/.m2/repository/org/springframework/boot/spring-boot-test/3.4.4/spring-boot-test-3.4.4.jar:/Users/aironman/.m2/repository/org/springframework/boot/spring-boot-test-autoconfigure/3.4.4/spring-boot-test-autoconfigure-3.4.4.jar:/Users/aironman/.m2/repository/com/jayway/jsonpath/json-path/2.9.0/json-path-2.9.0.jar:/Users/aironman/.m2/repository/jakarta/xml/bind/jakarta.xml.bind-api/4.0.2/jakarta.xml.bind-api-4.0.2.jar:/Users/aironman/.m2/repository/jakarta/activation/jakarta.activation-api/2.1.3/jakarta.activation-api-2.1.3.jar:/Users/aironman/.m2/repository/net/minidev/json-smart/2.5.2/json-smart-2.5.2.jar:/Users/aironman/.m2/repository/net/minidev/accessors-smart/2.5.2/accessors-smart-2.5.2.jar:/Users/aironman/.m2/repository/org/ow2/asm/asm/9.7.1/asm-9.7.1.jar:/Users/aironman/.m2/repository/org/assertj/assertj-core/3.26.3/assertj-core-3.26.3.jar:/Users/aironman/.m2/repository/org/awaitility/awaitility/4.2.2/awaitility-4.2.2.jar:/Users/aironman/.m2/repository/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:/Users/aironman/.m2/repository/org/junit/jupiter/junit-jupiter/5.11.4/junit-jupiter-5.11.4.jar:/Users/aironman/.m2/repository/org/junit/jupiter/junit-jupiter-params/5.11.4/junit-jupiter-params-5.11.4.jar:/Users/aironman/.m2/repository/org/junit/jupiter/junit-jupiter-engine/5.11.4/junit-jupiter-engine-5.11.4.jar:/Users/aironman/.m2/repository/org/junit/platform/junit-platform-engine/1.11.4/junit-platform-engine-1.11.4.jar:/Users/aironman/.m2/repository/org/skyscreamer/jsonassert/1.5.3/jsonassert-1.5.3.jar:/Users/aironman/.m2/repository/com/vaadin/external/google/android-json/0.0.20131108.vaadin1/android-json-0.0.20131108.vaadin1.jar:/Users/aironman/.m2/repository/org/springframework/spring-core/6.2.5/spring-core-6.2.5.jar:/Users/aironman/.m2/repository/org/springframework/spring-jcl/6.2.5/spring-jcl-6.2.5.jar:/Users/aironman/.m2/repository/org/springframework/spring-test/6.2.5/spring-test-6.2.5.jar:/Users/aironman/.m2/repository/org/xmlunit/xmlunit-core/2.10.0/xmlunit-core-2.10.0.jar:/Users/aironman/.m2/repository/io/projectreactor/reactor-test/3.6.10/reactor-test-3.6.10.jar:/Users/aironman/.m2/repository/org/testcontainers/testcontainers/1.21.0/testcontainers-1.21.0.jar:/Users/aironman/.m2/repository/junit/junit/4.13.2/junit-4.13.2.jar:/Users/aironman/.m2/repository/org/hamcrest/hamcrest-core/2.2/hamcrest-core-2.2.jar:/Users/aironman/.m2/repository/org/apache/commons/commons-compress/1.24.0/commons-compress-1.24.0.jar:/Users/aironman/.m2/repository/org/rnorth/duct-tape/duct-tape/1.0.8/duct-tape-1.0.8.jar:/Users/aironman/.m2/repository/org/jetbrains/annotations/17.0.0/annotations-17.0.0.jar:/Users/aironman/.m2/repository/com/github/docker-java/docker-java-api/3.4.2/docker-java-api-3.4.2.jar:/Users/aironman/.m2/repository/com/fasterxml/jackson/core/jackson-annotations/2.18.3/jackson-annotations-2.18.3.jar:/Users/aironman/.m2/repository/com/github/docker-java/docker-java-transport-zerodep/3.4.2/docker-java-transport-zerodep-3.4.2.jar:/Users/aironman/.m2/repository/com/github/docker-java/docker-java-transport/3.4.2/docker-java-transport-3.4.2.jar:/Users/aironman/.m2/repository/net/java/dev/jna/jna/5.13.0/jna-5.13.0.jar:/Users/aironman/.m2/repository/org/testcontainers/mysql/1.20.1/mysql-1.20.1.jar:/Users/aironman/.m2/repository/org/testcontainers/jdbc/1.20.6/jdbc-1.20.6.jar:/Users/aironman/.m2/repository/org/testcontainers/database-commons/1.20.6/database-commons-1.20.6.jar:/Users/aironman/.m2/repository/org/testcontainers/junit-jupiter/1.20.1/junit-jupiter-1.20.1.jar:/Users/aironman/.m2/repository/org/mockito/mockito-core/5.14.1/mockito-core-5.14.1.jar:/Users/aironman/.m2/repository/net/bytebuddy/byte-buddy/1.15.11/byte-buddy-1.15.11.jar:/Users/aironman/.m2/repository/net/bytebuddy/byte-buddy-agent/1.15.11/byte-buddy-agent-1.15.11.jar:/Users/aironman/.m2/repository/org/objenesis/objenesis/3.3/objenesis-3.3.jar:/Users/aironman/.m2/repository/org/mockito/mockito-junit-jupiter/5.14.1/mockito-junit-jupiter-5.14.1.jar:/Users/aironman/.m2/repository/org/junit/jupiter/junit-jupiter-api/5.11.4/junit-jupiter-api-5.11.4.jar:/Users/aironman/.m2/repository/org/opentest4j/opentest4j/1.3.0/opentest4j-1.3.0.jar:/Users/aironman/.m2/repository/org/junit/platform/junit-platform-commons/1.11.4/junit-platform-commons-1.11.4.jar:/Users/aironman/.m2/repository/org/apiguardian/apiguardian-api/1.1.2/apiguardian-api-1.1.2.jar:"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="user.home" value="/Users/aironman"/>
    <property name="user.language" value="es"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="java.version.date" value="2025-01-21"/>
    <property name="java.home" value="/Users/aironman/.sdkman/candidates/java/21.0.6-tem"/>
    <property name="file.separator" value="/"/>
    <property name="basedir" value="/Users/aironman/git/distributed-order-system/order-service"/>
    <property name="java.vm.compressedOopsMode" value="Zero based"/>
    <property name="line.separator" value="&#10;"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="FILE_LOG_CHARSET" value="UTF-8"/>
    <property name="java.awt.headless" value="true"/>
    <property name="apple.awt.application.name" value="ForkedBooter"/>
    <property name="surefire.real.class.path" value="/Users/aironman/git/distributed-order-system/order-service/target/surefire/surefirebooter-20250429145153490_3.jar"/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="ftp.nonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
    <property name="java.runtime.version" value="21.0.6+7-LTS"/>
    <property name="user.name" value="aironman"/>
    <property name="stdout.encoding" value="UTF-8"/>
    <property name="path.separator" value=":"/>
    <property name="os.version" value="15.4.1"/>
    <property name="java.runtime.name" value="OpenJDK Runtime Environment"/>
    <property name="file.encoding" value="UTF-8"/>
    <property name="java.vm.name" value="OpenJDK 64-Bit Server VM"/>
    <property name="java.vendor.version" value="Temurin-21.0.6+7"/>
    <property name="localRepository" value="/Users/aironman/.m2/repository"/>
    <property name="java.vendor.url.bug" value="https://github.com/adoptium/adoptium-support/issues"/>
    <property name="java.io.tmpdir" value="/var/folders/0x/gmzly6vn2f7ggfk47bdcsbnc0000gn/T/"/>
    <property name="java.version" value="21.0.6"/>
    <property name="user.dir" value="/Users/aironman/git/distributed-order-system/order-service"/>
    <property name="os.arch" value="x86_64"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="PID" value="18588"/>
    <property name="CONSOLE_LOG_CHARSET" value="UTF-8"/>
    <property name="native.encoding" value="UTF-8"/>
    <property name="java.library.path" value="/Users/aironman/Library/Java/Extensions:/Library/Java/Extensions:/Network/Library/Java/Extensions:/System/Library/Java/Extensions:/usr/lib/java:."/>
    <property name="java.vm.info" value="mixed mode"/>
    <property name="stderr.encoding" value="UTF-8"/>
    <property name="java.vendor" value="Eclipse Adoptium"/>
    <property name="java.vm.version" value="21.0.6+7-LTS"/>
    <property name="sun.io.unicode.encoding" value="UnicodeBig"/>
    <property name="socksNonProxyHosts" value="local|*.local|169.254/16|*.169.254/16"/>
    <property name="java.class.version" value="65.0"/>
  </properties>
  <testcase name="shouldHandleMeterRegistryFailureDuringSagaStep" classname="com.example.order.service.OrderServiceUnitTest" time="0.319">
    <error message="Cannot invoke &quot;org.reactivestreams.Publisher.subscribe(org.reactivestreams.Subscriber)&quot; because &quot;publisher&quot; is null" type="java.lang.NullPointerException"><![CDATA[java.lang.NullPointerException: Cannot invoke "org.reactivestreams.Publisher.subscribe(org.reactivestreams.Subscriber)" because "publisher" is null
	at reactor.test.DefaultStepVerifierBuilder$DefaultStepVerifier.toVerifierAndSubscribe(DefaultStepVerifierBuilder.java:891)
	at reactor.test.DefaultStepVerifierBuilder$DefaultStepVerifier.verify(DefaultStepVerifierBuilder.java:831)
	at reactor.test.DefaultStepVerifierBuilder$DefaultStepVerifier.verify(DefaultStepVerifierBuilder.java:823)
	at reactor.test.DefaultStepVerifierBuilder.verifyComplete(DefaultStepVerifierBuilder.java:690)
	at com.example.order.service.OrderServiceUnitTest.shouldHandleMeterRegistryFailureDuringSagaStep(OrderServiceUnitTest.java:533)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></error>
    <system-out><![CDATA[14:52:27.502 [main] INFO  c.e.order.service.OrderServiceImpl - Delegating execution of step reserveStock to SagaOrchestrator
]]></system-out>
  </testcase>
  <testcase name="shouldHandleCircuitBreakerHalfOpen" classname="com.example.order.service.OrderServiceUnitTest" time="0.011">
    <error message="&#10;Strict stubbing argument mismatch. Please check:&#10; - this invocation of &apos;executeOrderSaga&apos; method:&#10;    sagaOrchestrator.executeOrderSaga(&#10;    1L,&#10;    10,&#10;    100.0d,&#10;    &quot;deb8d39a-8000-4b64-bf4c-ea75c8ad97aa&quot;&#10;);&#10;    -&gt; at com.example.order.service.OrderServiceImpl.processOrder(OrderServiceImpl.java:42)&#10; - has following stubbing(s) with different arguments:&#10;    1. sagaOrchestrator.executeOrderSaga(&#10;    1L,&#10;    10,&#10;    100.0d,&#10;    &quot;f8b34947-815d-43b4-ab98-e85d1aa98269&quot;&#10;);&#10;      -&gt; at com.example.order.service.OrderServiceUnitTest.shouldHandleCircuitBreakerHalfOpen(OrderServiceUnitTest.java:298)&#10;Typically, stubbing argument mismatch indicates user mistake when writing tests.&#10;Mockito fails early so that you can debug potential problem easily.&#10;However, there are legit scenarios when this exception generates false negative signal:&#10;  - stubbing the same method multiple times using &apos;given().will()&apos; or &apos;when().then()&apos; API&#10;    Please use &apos;will().given()&apos; or &apos;doReturn().when()&apos; API for stubbing.&#10;  - stubbed method is intentionally invoked with different arguments by code under test&#10;    Please use default or &apos;silent&apos; JUnit Rule (equivalent of Strictness.LENIENT).&#10;For more information see javadoc for PotentialStubbingProblem class." type="org.mockito.exceptions.misusing.PotentialStubbingProblem"><![CDATA[org.mockito.exceptions.misusing.PotentialStubbingProblem: 

Strict stubbing argument mismatch. Please check:
 - this invocation of 'executeOrderSaga' method:
    sagaOrchestrator.executeOrderSaga(
    1L,
    10,
    100.0d,
    "deb8d39a-8000-4b64-bf4c-ea75c8ad97aa"
);
    -> at com.example.order.service.OrderServiceImpl.processOrder(OrderServiceImpl.java:42)
 - has following stubbing(s) with different arguments:
    1. sagaOrchestrator.executeOrderSaga(
    1L,
    10,
    100.0d,
    "f8b34947-815d-43b4-ab98-e85d1aa98269"
);
      -> at com.example.order.service.OrderServiceUnitTest.shouldHandleCircuitBreakerHalfOpen(OrderServiceUnitTest.java:298)
Typically, stubbing argument mismatch indicates user mistake when writing tests.
Mockito fails early so that you can debug potential problem easily.
However, there are legit scenarios when this exception generates false negative signal:
  - stubbing the same method multiple times using 'given().will()' or 'when().then()' API
    Please use 'will().given()' or 'doReturn().when()' API for stubbing.
  - stubbed method is intentionally invoked with different arguments by code under test
    Please use default or 'silent' JUnit Rule (equivalent of Strictness.LENIENT).
For more information see javadoc for PotentialStubbingProblem class.
	at com.example.order.service.SagaOrchestrator.executeOrderSaga(SagaOrchestrator.java:35)
	at com.example.order.service.OrderServiceImpl.processOrder(OrderServiceImpl.java:42)
	at com.example.order.service.OrderServiceUnitTest.shouldHandleCircuitBreakerHalfOpen(OrderServiceUnitTest.java:300)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></error>
    <system-out><![CDATA[14:52:27.511 [main] INFO  c.e.order.service.OrderServiceImpl - Starting order 1 with correlationId deb8d39a-8000-4b64-bf4c-ea75c8ad97aa
]]></system-out>
  </testcase>
  <testcase name="shouldHandleDatabaseFailureDuringOrderCreation" classname="com.example.order.service.OrderServiceUnitTest" time="0.008">
    <error message="Cannot invoke &quot;org.reactivestreams.Publisher.subscribe(org.reactivestreams.Subscriber)&quot; because &quot;publisher&quot; is null" type="java.lang.NullPointerException"><![CDATA[java.lang.NullPointerException: Cannot invoke "org.reactivestreams.Publisher.subscribe(org.reactivestreams.Subscriber)" because "publisher" is null
	at reactor.test.DefaultStepVerifierBuilder$DefaultStepVerifier.toVerifierAndSubscribe(DefaultStepVerifierBuilder.java:891)
	at reactor.test.DefaultStepVerifierBuilder$DefaultStepVerifier.verify(DefaultStepVerifierBuilder.java:831)
	at reactor.test.DefaultStepVerifierBuilder$DefaultStepVerifier.verify(DefaultStepVerifierBuilder.java:823)
	at reactor.test.DefaultStepVerifierBuilder.verifyComplete(DefaultStepVerifierBuilder.java:690)
	at com.example.order.service.OrderServiceUnitTest.shouldHandleDatabaseFailureDuringOrderCreation(OrderServiceUnitTest.java:428)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></error>
    <system-out><![CDATA[14:52:27.523 [main] INFO  c.e.order.service.OrderServiceImpl - Creating order 1 with correlationId test-correlation-id
]]></system-out>
  </testcase>
  <testcase name="shouldHandleMeterRegistryFailureDuringOrderCreation" classname="com.example.order.service.OrderServiceUnitTest" time="0.008">
    <error message="Cannot invoke &quot;org.reactivestreams.Publisher.subscribe(org.reactivestreams.Subscriber)&quot; because &quot;publisher&quot; is null" type="java.lang.NullPointerException"><![CDATA[java.lang.NullPointerException: Cannot invoke "org.reactivestreams.Publisher.subscribe(org.reactivestreams.Subscriber)" because "publisher" is null
	at reactor.test.DefaultStepVerifierBuilder$DefaultStepVerifier.toVerifierAndSubscribe(DefaultStepVerifierBuilder.java:891)
	at reactor.test.DefaultStepVerifierBuilder$DefaultStepVerifier.verify(DefaultStepVerifierBuilder.java:831)
	at reactor.test.DefaultStepVerifierBuilder$DefaultStepVerifier.verify(DefaultStepVerifierBuilder.java:823)
	at reactor.test.DefaultStepVerifierBuilder.verifyComplete(DefaultStepVerifierBuilder.java:690)
	at com.example.order.service.OrderServiceUnitTest.shouldHandleMeterRegistryFailureDuringOrderCreation(OrderServiceUnitTest.java:622)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></error>
    <system-out><![CDATA[14:52:27.532 [main] INFO  c.e.order.service.OrderServiceImpl - Creating order 1 with correlationId test-correlation-id
]]></system-out>
  </testcase>
  <testcase name="shouldUpdateMetricsDuringOrderProcessing" classname="com.example.order.service.OrderServiceUnitTest" time="0.008">
    <error message="&#10;Strict stubbing argument mismatch. Please check:&#10; - this invocation of &apos;executeOrderSaga&apos; method:&#10;    sagaOrchestrator.executeOrderSaga(&#10;    1L,&#10;    10,&#10;    100.0d,&#10;    &quot;f36929b9-f123-4f71-b2f5-cddb67f34f21&quot;&#10;);&#10;    -&gt; at com.example.order.service.OrderServiceImpl.processOrder(OrderServiceImpl.java:42)&#10; - has following stubbing(s) with different arguments:&#10;    1. sagaOrchestrator.executeOrderSaga(&#10;    1L,&#10;    10,&#10;    100.0d,&#10;    &quot;b0d377ba-477b-423b-acd8-89f5254a6997&quot;&#10;);&#10;      -&gt; at com.example.order.service.OrderServiceUnitTest.shouldUpdateMetricsDuringOrderProcessing(OrderServiceUnitTest.java:249)&#10;Typically, stubbing argument mismatch indicates user mistake when writing tests.&#10;Mockito fails early so that you can debug potential problem easily.&#10;However, there are legit scenarios when this exception generates false negative signal:&#10;  - stubbing the same method multiple times using &apos;given().will()&apos; or &apos;when().then()&apos; API&#10;    Please use &apos;will().given()&apos; or &apos;doReturn().when()&apos; API for stubbing.&#10;  - stubbed method is intentionally invoked with different arguments by code under test&#10;    Please use default or &apos;silent&apos; JUnit Rule (equivalent of Strictness.LENIENT).&#10;For more information see javadoc for PotentialStubbingProblem class." type="org.mockito.exceptions.misusing.PotentialStubbingProblem"><![CDATA[org.mockito.exceptions.misusing.PotentialStubbingProblem: 

Strict stubbing argument mismatch. Please check:
 - this invocation of 'executeOrderSaga' method:
    sagaOrchestrator.executeOrderSaga(
    1L,
    10,
    100.0d,
    "f36929b9-f123-4f71-b2f5-cddb67f34f21"
);
    -> at com.example.order.service.OrderServiceImpl.processOrder(OrderServiceImpl.java:42)
 - has following stubbing(s) with different arguments:
    1. sagaOrchestrator.executeOrderSaga(
    1L,
    10,
    100.0d,
    "b0d377ba-477b-423b-acd8-89f5254a6997"
);
      -> at com.example.order.service.OrderServiceUnitTest.shouldUpdateMetricsDuringOrderProcessing(OrderServiceUnitTest.java:249)
Typically, stubbing argument mismatch indicates user mistake when writing tests.
Mockito fails early so that you can debug potential problem easily.
However, there are legit scenarios when this exception generates false negative signal:
  - stubbing the same method multiple times using 'given().will()' or 'when().then()' API
    Please use 'will().given()' or 'doReturn().when()' API for stubbing.
  - stubbed method is intentionally invoked with different arguments by code under test
    Please use default or 'silent' JUnit Rule (equivalent of Strictness.LENIENT).
For more information see javadoc for PotentialStubbingProblem class.
	at com.example.order.service.SagaOrchestrator.executeOrderSaga(SagaOrchestrator.java:35)
	at com.example.order.service.OrderServiceImpl.processOrder(OrderServiceImpl.java:42)
	at com.example.order.service.OrderServiceUnitTest.shouldUpdateMetricsDuringOrderProcessing(OrderServiceUnitTest.java:251)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></error>
    <system-out><![CDATA[14:52:27.540 [main] INFO  c.e.order.service.OrderServiceImpl - Starting order 1 with correlationId f36929b9-f123-4f71-b2f5-cddb67f34f21
]]></system-out>
  </testcase>
  <testcase name="shouldFailToCreateOrderWithInvalidCorrelationId(String)[1]" classname="com.example.order.service.OrderServiceUnitTest" time="0.013">
    <error message="Cannot invoke &quot;org.reactivestreams.Publisher.subscribe(org.reactivestreams.Subscriber)&quot; because &quot;publisher&quot; is null" type="java.lang.NullPointerException"><![CDATA[java.lang.NullPointerException: Cannot invoke "org.reactivestreams.Publisher.subscribe(org.reactivestreams.Subscriber)" because "publisher" is null
	at reactor.test.DefaultStepVerifierBuilder$DefaultStepVerifier.toVerifierAndSubscribe(DefaultStepVerifierBuilder.java:891)
	at reactor.test.DefaultStepVerifierBuilder$DefaultStepVerifier.verify(DefaultStepVerifierBuilder.java:831)
	at reactor.test.DefaultStepVerifierBuilder$DefaultStepVerifier.verify(DefaultStepVerifierBuilder.java:823)
	at com.example.order.service.OrderServiceUnitTest.shouldFailToCreateOrderWithInvalidCorrelationId(OrderServiceUnitTest.java:450)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></error>
    <system-out><![CDATA[14:52:27.574 [main] INFO  c.e.order.service.OrderServiceImpl - Creating order 1 with correlationId 
]]></system-out>
  </testcase>
  <testcase name="shouldFailToCreateOrderWithInvalidCorrelationId(String)[2]" classname="com.example.order.service.OrderServiceUnitTest" time="0.007">
    <error message="Cannot invoke &quot;org.reactivestreams.Publisher.subscribe(org.reactivestreams.Subscriber)&quot; because &quot;publisher&quot; is null" type="java.lang.NullPointerException"><![CDATA[java.lang.NullPointerException: Cannot invoke "org.reactivestreams.Publisher.subscribe(org.reactivestreams.Subscriber)" because "publisher" is null
	at reactor.test.DefaultStepVerifierBuilder$DefaultStepVerifier.toVerifierAndSubscribe(DefaultStepVerifierBuilder.java:891)
	at reactor.test.DefaultStepVerifierBuilder$DefaultStepVerifier.verify(DefaultStepVerifierBuilder.java:831)
	at reactor.test.DefaultStepVerifierBuilder$DefaultStepVerifier.verify(DefaultStepVerifierBuilder.java:823)
	at com.example.order.service.OrderServiceUnitTest.shouldFailToCreateOrderWithInvalidCorrelationId(OrderServiceUnitTest.java:450)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></error>
    <system-out><![CDATA[14:52:27.584 [main] INFO  c.e.order.service.OrderServiceImpl - Creating order 1 with correlationId  
]]></system-out>
  </testcase>
  <testcase name="shouldHandleCircuitBreakerOpen" classname="com.example.order.service.OrderServiceUnitTest" time="0.009">
    <error message="&#10;Unnecessary stubbings detected.&#10;Clean &amp; maintainable test code requires zero unnecessary code.&#10;Following stubbings are unnecessary (click to navigate to relevant line of code):&#10;  1. -&gt; at com.example.order.service.OrderServiceUnitTest.setUp(OrderServiceUnitTest.java:134)&#10;  2. -&gt; at com.example.order.service.OrderServiceUnitTest.setUp(OrderServiceUnitTest.java:135)&#10;  3. -&gt; at com.example.order.service.OrderServiceUnitTest.setUp(OrderServiceUnitTest.java:136)&#10;  4. -&gt; at com.example.order.service.OrderServiceUnitTest.setUp(OrderServiceUnitTest.java:137)&#10;  5. -&gt; at com.example.order.service.OrderServiceUnitTest.setUp(OrderServiceUnitTest.java:138)&#10;  6. -&gt; at com.example.order.service.OrderServiceUnitTest.setUp(OrderServiceUnitTest.java:139)&#10;  7. -&gt; at com.example.order.service.OrderServiceUnitTest.setUp(OrderServiceUnitTest.java:140)&#10;  8. -&gt; at com.example.order.service.OrderServiceUnitTest.setUp(OrderServiceUnitTest.java:141)&#10;  9. -&gt; at com.example.order.service.OrderServiceUnitTest.setUp(OrderServiceUnitTest.java:142)&#10;  10. -&gt; at com.example.order.service.OrderServiceUnitTest.setUp(OrderServiceUnitTest.java:143)&#10;  11. -&gt; at com.example.order.service.OrderServiceUnitTest.setUp(OrderServiceUnitTest.java:144)&#10;  12. -&gt; at com.example.order.service.OrderServiceUnitTest.setUp(OrderServiceUnitTest.java:145)&#10;  13. -&gt; at com.example.order.service.OrderServiceUnitTest.setUp(OrderServiceUnitTest.java:146)&#10;  14. -&gt; at com.example.order.service.OrderServiceUnitTest.setUp(OrderServiceUnitTest.java:152)&#10;  15. -&gt; at com.example.order.service.OrderServiceUnitTest.setUp(OrderServiceUnitTest.java:153)&#10;  16. -&gt; at com.example.order.service.OrderServiceUnitTest.setUp(OrderServiceUnitTest.java:154)&#10;  17. -&gt; at com.example.order.service.OrderServiceUnitTest.setUp(OrderServiceUnitTest.java:155)&#10;  18. -&gt; at com.example.order.service.OrderServiceUnitTest.setUp(OrderServiceUnitTest.java:157)&#10;  19. -&gt; at com.example.order.service.OrderServiceUnitTest.setUp(OrderServiceUnitTest.java:159)&#10;  20. -&gt; at com.example.order.service.OrderServiceUnitTest.shouldHandleCircuitBreakerOpen(OrderServiceUnitTest.java:269)&#10;Please remove unnecessary stubbings or use &apos;lenient&apos; strictness. More info: javadoc for UnnecessaryStubbingException class." type="org.mockito.exceptions.misusing.UnnecessaryStubbingException"><![CDATA[org.mockito.exceptions.misusing.UnnecessaryStubbingException: 

Unnecessary stubbings detected.
Clean & maintainable test code requires zero unnecessary code.
Following stubbings are unnecessary (click to navigate to relevant line of code):
  1. -> at com.example.order.service.OrderServiceUnitTest.setUp(OrderServiceUnitTest.java:134)
  2. -> at com.example.order.service.OrderServiceUnitTest.setUp(OrderServiceUnitTest.java:135)
  3. -> at com.example.order.service.OrderServiceUnitTest.setUp(OrderServiceUnitTest.java:136)
  4. -> at com.example.order.service.OrderServiceUnitTest.setUp(OrderServiceUnitTest.java:137)
  5. -> at com.example.order.service.OrderServiceUnitTest.setUp(OrderServiceUnitTest.java:138)
  6. -> at com.example.order.service.OrderServiceUnitTest.setUp(OrderServiceUnitTest.java:139)
  7. -> at com.example.order.service.OrderServiceUnitTest.setUp(OrderServiceUnitTest.java:140)
  8. -> at com.example.order.service.OrderServiceUnitTest.setUp(OrderServiceUnitTest.java:141)
  9. -> at com.example.order.service.OrderServiceUnitTest.setUp(OrderServiceUnitTest.java:142)
  10. -> at com.example.order.service.OrderServiceUnitTest.setUp(OrderServiceUnitTest.java:143)
  11. -> at com.example.order.service.OrderServiceUnitTest.setUp(OrderServiceUnitTest.java:144)
  12. -> at com.example.order.service.OrderServiceUnitTest.setUp(OrderServiceUnitTest.java:145)
  13. -> at com.example.order.service.OrderServiceUnitTest.setUp(OrderServiceUnitTest.java:146)
  14. -> at com.example.order.service.OrderServiceUnitTest.setUp(OrderServiceUnitTest.java:152)
  15. -> at com.example.order.service.OrderServiceUnitTest.setUp(OrderServiceUnitTest.java:153)
  16. -> at com.example.order.service.OrderServiceUnitTest.setUp(OrderServiceUnitTest.java:154)
  17. -> at com.example.order.service.OrderServiceUnitTest.setUp(OrderServiceUnitTest.java:155)
  18. -> at com.example.order.service.OrderServiceUnitTest.setUp(OrderServiceUnitTest.java:157)
  19. -> at com.example.order.service.OrderServiceUnitTest.setUp(OrderServiceUnitTest.java:159)
  20. -> at com.example.order.service.OrderServiceUnitTest.shouldHandleCircuitBreakerOpen(OrderServiceUnitTest.java:269)
Please remove unnecessary stubbings or use 'lenient' strictness. More info: javadoc for UnnecessaryStubbingException class.
	at org.mockito.junit.jupiter.MockitoExtension.afterEach(MockitoExtension.java:197)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></error>
    <system-out><![CDATA[14:52:27.592 [main] INFO  c.e.order.service.OrderServiceImpl - Starting order 1 with correlationId 5ea39eab-b8e6-4bf6-bf71-fbbf43e50bb4
14:52:27.592 [main] WARN  c.e.order.service.OrderServiceImpl - Circuit breaker open for order 1
14:52:27.592 [main] WARN  c.e.order.service.OrderServiceImpl - Returning fallback order for 1 with reason: circuit_breaker_open
14:52:27.593 [main] WARN  c.e.order.service.OrderServiceImpl - Returning fallback order for 1
14:52:27.594 [main] INFO  c.e.order.service.OrderServiceImpl - Fallback order created for 1: Order[id=1, status=failed, correlationId=unknown]
]]></system-out>
  </testcase>
  <testcase name="shouldFailToCreateOrderWithInvalidOrderId(Long)[1]" classname="com.example.order.service.OrderServiceUnitTest" time="0.007">
    <error message="Cannot invoke &quot;org.reactivestreams.Publisher.subscribe(org.reactivestreams.Subscriber)&quot; because &quot;publisher&quot; is null" type="java.lang.NullPointerException"><![CDATA[java.lang.NullPointerException: Cannot invoke "org.reactivestreams.Publisher.subscribe(org.reactivestreams.Subscriber)" because "publisher" is null
	at reactor.test.DefaultStepVerifierBuilder$DefaultStepVerifier.toVerifierAndSubscribe(DefaultStepVerifierBuilder.java:891)
	at reactor.test.DefaultStepVerifierBuilder$DefaultStepVerifier.verify(DefaultStepVerifierBuilder.java:831)
	at reactor.test.DefaultStepVerifierBuilder$DefaultStepVerifier.verify(DefaultStepVerifierBuilder.java:823)
	at com.example.order.service.OrderServiceUnitTest.shouldFailToCreateOrderWithInvalidOrderId(OrderServiceUnitTest.java:469)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></error>
    <system-out><![CDATA[14:52:27.602 [main] INFO  c.e.order.service.OrderServiceImpl - Creating order 0 with correlationId test-correlation-id
]]></system-out>
  </testcase>
  <testcase name="shouldFailToCreateOrderWithInvalidOrderId(Long)[2]" classname="com.example.order.service.OrderServiceUnitTest" time="0.007">
    <error message="Cannot invoke &quot;org.reactivestreams.Publisher.subscribe(org.reactivestreams.Subscriber)&quot; because &quot;publisher&quot; is null" type="java.lang.NullPointerException"><![CDATA[java.lang.NullPointerException: Cannot invoke "org.reactivestreams.Publisher.subscribe(org.reactivestreams.Subscriber)" because "publisher" is null
	at reactor.test.DefaultStepVerifierBuilder$DefaultStepVerifier.toVerifierAndSubscribe(DefaultStepVerifierBuilder.java:891)
	at reactor.test.DefaultStepVerifierBuilder$DefaultStepVerifier.verify(DefaultStepVerifierBuilder.java:831)
	at reactor.test.DefaultStepVerifierBuilder$DefaultStepVerifier.verify(DefaultStepVerifierBuilder.java:823)
	at com.example.order.service.OrderServiceUnitTest.shouldFailToCreateOrderWithInvalidOrderId(OrderServiceUnitTest.java:469)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></error>
    <system-out><![CDATA[14:52:27.610 [main] INFO  c.e.order.service.OrderServiceImpl - Creating order -1 with correlationId test-correlation-id
]]></system-out>
  </testcase>
  <testcase name="shouldPersistOrderSuccessfully" classname="com.example.order.service.OrderServiceUnitTest" time="0.006">
    <error message="&#10;Strict stubbing argument mismatch. Please check:&#10; - this invocation of &apos;executeOrderSaga&apos; method:&#10;    sagaOrchestrator.executeOrderSaga(&#10;    1L,&#10;    10,&#10;    100.0d,&#10;    &quot;a25c52a5-5356-4e7e-b66e-fe47f437feaf&quot;&#10;);&#10;    -&gt; at com.example.order.service.OrderServiceImpl.processOrder(OrderServiceImpl.java:42)&#10; - has following stubbing(s) with different arguments:&#10;    1. sagaOrchestrator.executeOrderSaga(&#10;    1L,&#10;    10,&#10;    100.0d,&#10;    &quot;0f7c16ce-73c0-45ab-b66f-df05f06d4169&quot;&#10;);&#10;      -&gt; at com.example.order.service.OrderServiceUnitTest.shouldPersistOrderSuccessfully(OrderServiceUnitTest.java:206)&#10;Typically, stubbing argument mismatch indicates user mistake when writing tests.&#10;Mockito fails early so that you can debug potential problem easily.&#10;However, there are legit scenarios when this exception generates false negative signal:&#10;  - stubbing the same method multiple times using &apos;given().will()&apos; or &apos;when().then()&apos; API&#10;    Please use &apos;will().given()&apos; or &apos;doReturn().when()&apos; API for stubbing.&#10;  - stubbed method is intentionally invoked with different arguments by code under test&#10;    Please use default or &apos;silent&apos; JUnit Rule (equivalent of Strictness.LENIENT).&#10;For more information see javadoc for PotentialStubbingProblem class." type="org.mockito.exceptions.misusing.PotentialStubbingProblem"><![CDATA[org.mockito.exceptions.misusing.PotentialStubbingProblem: 

Strict stubbing argument mismatch. Please check:
 - this invocation of 'executeOrderSaga' method:
    sagaOrchestrator.executeOrderSaga(
    1L,
    10,
    100.0d,
    "a25c52a5-5356-4e7e-b66e-fe47f437feaf"
);
    -> at com.example.order.service.OrderServiceImpl.processOrder(OrderServiceImpl.java:42)
 - has following stubbing(s) with different arguments:
    1. sagaOrchestrator.executeOrderSaga(
    1L,
    10,
    100.0d,
    "0f7c16ce-73c0-45ab-b66f-df05f06d4169"
);
      -> at com.example.order.service.OrderServiceUnitTest.shouldPersistOrderSuccessfully(OrderServiceUnitTest.java:206)
Typically, stubbing argument mismatch indicates user mistake when writing tests.
Mockito fails early so that you can debug potential problem easily.
However, there are legit scenarios when this exception generates false negative signal:
  - stubbing the same method multiple times using 'given().will()' or 'when().then()' API
    Please use 'will().given()' or 'doReturn().when()' API for stubbing.
  - stubbed method is intentionally invoked with different arguments by code under test
    Please use default or 'silent' JUnit Rule (equivalent of Strictness.LENIENT).
For more information see javadoc for PotentialStubbingProblem class.
	at com.example.order.service.SagaOrchestrator.executeOrderSaga(SagaOrchestrator.java:35)
	at com.example.order.service.OrderServiceImpl.processOrder(OrderServiceImpl.java:42)
	at com.example.order.service.OrderServiceUnitTest.shouldPersistOrderSuccessfully(OrderServiceUnitTest.java:208)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></error>
    <system-out><![CDATA[14:52:27.617 [main] INFO  c.e.order.service.OrderServiceImpl - Starting order 1 with correlationId a25c52a5-5356-4e7e-b66e-fe47f437feaf
]]></system-out>
  </testcase>
  <testcase name="shouldProcessOrderWithDifferentQuantitiesAndAmounts(Long, int, double)[1]" classname="com.example.order.service.OrderServiceUnitTest" time="0.008">
    <error message="Cannot invoke &quot;reactor.core.publisher.Mono.timeout(java.time.Duration)&quot; because the return value of &quot;com.example.order.service.SagaOrchestrator.executeOrderSaga(java.lang.Long, int, double, String)&quot; is null" type="java.lang.NullPointerException"><![CDATA[java.lang.NullPointerException: Cannot invoke "reactor.core.publisher.Mono.timeout(java.time.Duration)" because the return value of "com.example.order.service.SagaOrchestrator.executeOrderSaga(java.lang.Long, int, double, String)" is null
	at com.example.order.service.OrderServiceImpl.processOrder(OrderServiceImpl.java:43)
	at com.example.order.service.OrderServiceUnitTest.shouldProcessOrderWithDifferentQuantitiesAndAmounts(OrderServiceUnitTest.java:585)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></error>
    <system-out><![CDATA[14:52:27.630 [main] INFO  c.e.order.service.OrderServiceImpl - Starting order 1 with correlationId 366c2a83-c2b4-4154-81fe-6be2dd732b33
]]></system-out>
  </testcase>
  <testcase name="shouldProcessOrderWithDifferentQuantitiesAndAmounts(Long, int, double)[2]" classname="com.example.order.service.OrderServiceUnitTest" time="0.006">
    <error message="Cannot invoke &quot;reactor.core.publisher.Mono.timeout(java.time.Duration)&quot; because the return value of &quot;com.example.order.service.SagaOrchestrator.executeOrderSaga(java.lang.Long, int, double, String)&quot; is null" type="java.lang.NullPointerException"><![CDATA[java.lang.NullPointerException: Cannot invoke "reactor.core.publisher.Mono.timeout(java.time.Duration)" because the return value of "com.example.order.service.SagaOrchestrator.executeOrderSaga(java.lang.Long, int, double, String)" is null
	at com.example.order.service.OrderServiceImpl.processOrder(OrderServiceImpl.java:43)
	at com.example.order.service.OrderServiceUnitTest.shouldProcessOrderWithDifferentQuantitiesAndAmounts(OrderServiceUnitTest.java:585)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></error>
    <system-out><![CDATA[14:52:27.637 [main] INFO  c.e.order.service.OrderServiceImpl - Starting order 2 with correlationId 2da3d7d1-58a7-48ce-89e3-b598fa215e2b
]]></system-out>
  </testcase>
  <testcase name="shouldProcessOrderWithDifferentQuantitiesAndAmounts(Long, int, double)[3]" classname="com.example.order.service.OrderServiceUnitTest" time="0.006">
    <error message="Cannot invoke &quot;reactor.core.publisher.Mono.timeout(java.time.Duration)&quot; because the return value of &quot;com.example.order.service.SagaOrchestrator.executeOrderSaga(java.lang.Long, int, double, String)&quot; is null" type="java.lang.NullPointerException"><![CDATA[java.lang.NullPointerException: Cannot invoke "reactor.core.publisher.Mono.timeout(java.time.Duration)" because the return value of "com.example.order.service.SagaOrchestrator.executeOrderSaga(java.lang.Long, int, double, String)" is null
	at com.example.order.service.OrderServiceImpl.processOrder(OrderServiceImpl.java:43)
	at com.example.order.service.OrderServiceUnitTest.shouldProcessOrderWithDifferentQuantitiesAndAmounts(OrderServiceUnitTest.java:585)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></error>
    <system-out><![CDATA[14:52:27.644 [main] INFO  c.e.order.service.OrderServiceImpl - Starting order 3 with correlationId 1302ce79-e626-4885-90da-f963c8823f48
]]></system-out>
  </testcase>
  <testcase name="shouldPersistOrderDuringCreation" classname="com.example.order.service.OrderServiceUnitTest" time="0.008">
    <error message="Cannot invoke &quot;org.reactivestreams.Publisher.subscribe(org.reactivestreams.Subscriber)&quot; because &quot;publisher&quot; is null" type="java.lang.NullPointerException"><![CDATA[java.lang.NullPointerException: Cannot invoke "org.reactivestreams.Publisher.subscribe(org.reactivestreams.Subscriber)" because "publisher" is null
	at reactor.test.DefaultStepVerifierBuilder$DefaultStepVerifier.toVerifierAndSubscribe(DefaultStepVerifierBuilder.java:891)
	at reactor.test.DefaultStepVerifierBuilder$DefaultStepVerifier.verify(DefaultStepVerifierBuilder.java:831)
	at reactor.test.DefaultStepVerifierBuilder$DefaultStepVerifier.verify(DefaultStepVerifierBuilder.java:823)
	at reactor.test.DefaultStepVerifierBuilder.verifyComplete(DefaultStepVerifierBuilder.java:690)
	at com.example.order.service.OrderServiceUnitTest.shouldPersistOrderDuringCreation(OrderServiceUnitTest.java:381)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></error>
    <system-out><![CDATA[14:52:27.652 [main] INFO  c.e.order.service.OrderServiceImpl - Creating order 1 with correlationId test-correlation-id
]]></system-out>
  </testcase>
  <testcase name="shouldHandleConcurrentDatabaseAndRedisFailure" classname="com.example.order.service.OrderServiceUnitTest" time="0.006">
    <error message="Cannot invoke &quot;org.springframework.data.redis.core.ReactiveListOperations.leftPush(Object, Object)&quot; because the return value of &quot;org.springframework.data.redis.core.ReactiveRedisTemplate.opsForList()&quot; is null" type="java.lang.NullPointerException"><![CDATA[java.lang.NullPointerException: Cannot invoke "org.springframework.data.redis.core.ReactiveListOperations.leftPush(Object, Object)" because the return value of "org.springframework.data.redis.core.ReactiveRedisTemplate.opsForList()" is null
	at com.example.order.service.OrderServiceUnitTest.shouldHandleConcurrentDatabaseAndRedisFailure(OrderServiceUnitTest.java:563)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></error>
  </testcase>
  <testcase name="shouldPublishOrderCreatedEventSuccessfully" classname="com.example.order.service.OrderServiceUnitTest" time="0.001">
    <error message="&#10;Misplaced or misused argument matcher detected here:&#10;&#10;-&gt; at com.example.order.service.OrderServiceUnitTest.shouldHandleConcurrentDatabaseAndRedisFailure(OrderServiceUnitTest.java:563)&#10;-&gt; at com.example.order.service.OrderServiceUnitTest.shouldHandleConcurrentDatabaseAndRedisFailure(OrderServiceUnitTest.java:563)&#10;&#10;You cannot use argument matchers outside of verification or stubbing.&#10;Examples of correct usage of argument matchers:&#10;    when(mock.get(anyInt())).thenReturn(null);&#10;    doThrow(new RuntimeException()).when(mock).someVoidMethod(any());&#10;    verify(mock).someMethod(contains(&quot;foo&quot;))&#10;&#10;This message may appear after an NullPointerException if the last matcher is returning an object &#10;like any() but the stubbed method signature expect a primitive argument, in this case,&#10;use primitive alternatives.&#10;    when(mock.get(any())); // bad use, will raise NPE&#10;    when(mock.get(anyInt())); // correct usage use&#10;&#10;Also, this error might show up because you use argument matchers with methods that cannot be mocked.&#10;Following methods *cannot* be stubbed/verified: final/private/equals()/hashCode().&#10;Mocking methods declared on non-public parent classes is not supported.&#10;" type="org.mockito.exceptions.misusing.InvalidUseOfMatchersException"><![CDATA[org.mockito.exceptions.misusing.InvalidUseOfMatchersException: 

Misplaced or misused argument matcher detected here:

-> at com.example.order.service.OrderServiceUnitTest.shouldHandleConcurrentDatabaseAndRedisFailure(OrderServiceUnitTest.java:563)
-> at com.example.order.service.OrderServiceUnitTest.shouldHandleConcurrentDatabaseAndRedisFailure(OrderServiceUnitTest.java:563)

You cannot use argument matchers outside of verification or stubbing.
Examples of correct usage of argument matchers:
    when(mock.get(anyInt())).thenReturn(null);
    doThrow(new RuntimeException()).when(mock).someVoidMethod(any());
    verify(mock).someMethod(contains("foo"))

This message may appear after an NullPointerException if the last matcher is returning an object 
like any() but the stubbed method signature expect a primitive argument, in this case,
use primitive alternatives.
    when(mock.get(any())); // bad use, will raise NPE
    when(mock.get(anyInt())); // correct usage use

Also, this error might show up because you use argument matchers with methods that cannot be mocked.
Following methods *cannot* be stubbed/verified: final/private/equals()/hashCode().
Mocking methods declared on non-public parent classes is not supported.

	at org.mockito.junit.jupiter.MockitoExtension.beforeEach(MockitoExtension.java:160)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	Suppressed: java.lang.NullPointerException: Cannot invoke "java.util.Set.forEach(java.util.function.Consumer)" because the return value of "org.junit.jupiter.api.extension.ExtensionContext$Store.remove(Object, java.lang.Class)" is null
		at org.mockito.junit.jupiter.MockitoExtension.afterEach(MockitoExtension.java:194)
		... 2 more
]]></error>
  </testcase>
  <testcase name="shouldPublishOrderCreatedEvent" classname="com.example.order.service.OrderServiceUnitTest" time="0.006">
    <error message="Cannot invoke &quot;org.reactivestreams.Publisher.subscribe(org.reactivestreams.Subscriber)&quot; because &quot;publisher&quot; is null" type="java.lang.NullPointerException"><![CDATA[java.lang.NullPointerException: Cannot invoke "org.reactivestreams.Publisher.subscribe(org.reactivestreams.Subscriber)" because "publisher" is null
	at reactor.test.DefaultStepVerifierBuilder$DefaultStepVerifier.toVerifierAndSubscribe(DefaultStepVerifierBuilder.java:891)
	at reactor.test.DefaultStepVerifierBuilder$DefaultStepVerifier.verify(DefaultStepVerifierBuilder.java:831)
	at reactor.test.DefaultStepVerifierBuilder$DefaultStepVerifier.verify(DefaultStepVerifierBuilder.java:823)
	at reactor.test.DefaultStepVerifierBuilder.verifyComplete(DefaultStepVerifierBuilder.java:690)
	at com.example.order.service.OrderServiceUnitTest.shouldPublishOrderCreatedEvent(OrderServiceUnitTest.java:398)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></error>
    <system-out><![CDATA[14:52:27.668 [main] INFO  c.e.order.service.OrderServiceImpl - Creating order 1 with correlationId test-correlation-id
]]></system-out>
  </testcase>
  <testcase name="shouldHandleTimeoutDuringOrderProcessing" classname="com.example.order.service.OrderServiceUnitTest" time="0.005">
    <error message="&#10;Strict stubbing argument mismatch. Please check:&#10; - this invocation of &apos;executeOrderSaga&apos; method:&#10;    sagaOrchestrator.executeOrderSaga(&#10;    1L,&#10;    10,&#10;    100.0d,&#10;    &quot;230b97e4-2d5b-4a68-940e-854791c2778a&quot;&#10;);&#10;    -&gt; at com.example.order.service.OrderServiceImpl.processOrder(OrderServiceImpl.java:42)&#10; - has following stubbing(s) with different arguments:&#10;    1. sagaOrchestrator.executeOrderSaga(&#10;    1L,&#10;    10,&#10;    100.0d,&#10;    &quot;9a5ef31f-2ad4-4ace-bf2c-8e891a6b02d2&quot;&#10;);&#10;      -&gt; at com.example.order.service.OrderServiceUnitTest.shouldHandleTimeoutDuringOrderProcessing(OrderServiceUnitTest.java:344)&#10;Typically, stubbing argument mismatch indicates user mistake when writing tests.&#10;Mockito fails early so that you can debug potential problem easily.&#10;However, there are legit scenarios when this exception generates false negative signal:&#10;  - stubbing the same method multiple times using &apos;given().will()&apos; or &apos;when().then()&apos; API&#10;    Please use &apos;will().given()&apos; or &apos;doReturn().when()&apos; API for stubbing.&#10;  - stubbed method is intentionally invoked with different arguments by code under test&#10;    Please use default or &apos;silent&apos; JUnit Rule (equivalent of Strictness.LENIENT).&#10;For more information see javadoc for PotentialStubbingProblem class." type="org.mockito.exceptions.misusing.PotentialStubbingProblem"><![CDATA[org.mockito.exceptions.misusing.PotentialStubbingProblem: 

Strict stubbing argument mismatch. Please check:
 - this invocation of 'executeOrderSaga' method:
    sagaOrchestrator.executeOrderSaga(
    1L,
    10,
    100.0d,
    "230b97e4-2d5b-4a68-940e-854791c2778a"
);
    -> at com.example.order.service.OrderServiceImpl.processOrder(OrderServiceImpl.java:42)
 - has following stubbing(s) with different arguments:
    1. sagaOrchestrator.executeOrderSaga(
    1L,
    10,
    100.0d,
    "9a5ef31f-2ad4-4ace-bf2c-8e891a6b02d2"
);
      -> at com.example.order.service.OrderServiceUnitTest.shouldHandleTimeoutDuringOrderProcessing(OrderServiceUnitTest.java:344)
Typically, stubbing argument mismatch indicates user mistake when writing tests.
Mockito fails early so that you can debug potential problem easily.
However, there are legit scenarios when this exception generates false negative signal:
  - stubbing the same method multiple times using 'given().will()' or 'when().then()' API
    Please use 'will().given()' or 'doReturn().when()' API for stubbing.
  - stubbed method is intentionally invoked with different arguments by code under test
    Please use default or 'silent' JUnit Rule (equivalent of Strictness.LENIENT).
For more information see javadoc for PotentialStubbingProblem class.
	at com.example.order.service.SagaOrchestrator.executeOrderSaga(SagaOrchestrator.java:35)
	at com.example.order.service.OrderServiceImpl.processOrder(OrderServiceImpl.java:42)
	at com.example.order.service.OrderServiceUnitTest.shouldHandleTimeoutDuringOrderProcessing(OrderServiceUnitTest.java:348)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></error>
    <system-out><![CDATA[14:52:27.673 [main] INFO  c.e.order.service.OrderServiceImpl - Starting order 1 with correlationId 230b97e4-2d5b-4a68-940e-854791c2778a
]]></system-out>
  </testcase>
  <testcase name="shouldExecuteCompensationOnStepFailure" classname="com.example.order.service.OrderServiceUnitTest" time="0.006">
    <error message="Cannot invoke &quot;org.reactivestreams.Publisher.subscribe(org.reactivestreams.Subscriber)&quot; because &quot;publisher&quot; is null" type="java.lang.NullPointerException"><![CDATA[java.lang.NullPointerException: Cannot invoke "org.reactivestreams.Publisher.subscribe(org.reactivestreams.Subscriber)" because "publisher" is null
	at reactor.test.DefaultStepVerifierBuilder$DefaultStepVerifier.toVerifierAndSubscribe(DefaultStepVerifierBuilder.java:891)
	at reactor.test.DefaultStepVerifierBuilder$DefaultStepVerifier.verify(DefaultStepVerifierBuilder.java:831)
	at reactor.test.DefaultStepVerifierBuilder$DefaultStepVerifier.verify(DefaultStepVerifierBuilder.java:823)
	at com.example.order.service.OrderServiceUnitTest.shouldExecuteCompensationOnStepFailure(OrderServiceUnitTest.java:189)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></error>
    <system-out><![CDATA[14:52:27.679 [main] INFO  c.e.order.service.OrderServiceImpl - Delegating execution of step reserveStock to SagaOrchestrator
]]></system-out>
  </testcase>
  <testcase name="shouldFailToProcessOrderWithInvalidInputs(Long, int, double, String)[1]" classname="com.example.order.service.OrderServiceUnitTest" time="0.008">
    <error message="Cannot invoke &quot;reactor.core.publisher.Mono.timeout(java.time.Duration)&quot; because the return value of &quot;com.example.order.service.SagaOrchestrator.executeOrderSaga(java.lang.Long, int, double, String)&quot; is null" type="java.lang.NullPointerException"><![CDATA[java.lang.NullPointerException: Cannot invoke "reactor.core.publisher.Mono.timeout(java.time.Duration)" because the return value of "com.example.order.service.SagaOrchestrator.executeOrderSaga(java.lang.Long, int, double, String)" is null
	at com.example.order.service.OrderServiceImpl.processOrder(OrderServiceImpl.java:43)
	at com.example.order.service.OrderServiceUnitTest.shouldFailToProcessOrderWithInvalidInputs(OrderServiceUnitTest.java:315)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></error>
    <system-out><![CDATA[14:52:27.688 [main] INFO  c.e.order.service.OrderServiceImpl - Starting order 0 with correlationId b268000b-92b5-4745-bcbe-d1bf945b165d
]]></system-out>
  </testcase>
  <testcase name="shouldFailToProcessOrderWithInvalidInputs(Long, int, double, String)[2]" classname="com.example.order.service.OrderServiceUnitTest" time="0.006">
    <error message="Cannot invoke &quot;reactor.core.publisher.Mono.timeout(java.time.Duration)&quot; because the return value of &quot;com.example.order.service.SagaOrchestrator.executeOrderSaga(java.lang.Long, int, double, String)&quot; is null" type="java.lang.NullPointerException"><![CDATA[java.lang.NullPointerException: Cannot invoke "reactor.core.publisher.Mono.timeout(java.time.Duration)" because the return value of "com.example.order.service.SagaOrchestrator.executeOrderSaga(java.lang.Long, int, double, String)" is null
	at com.example.order.service.OrderServiceImpl.processOrder(OrderServiceImpl.java:43)
	at com.example.order.service.OrderServiceUnitTest.shouldFailToProcessOrderWithInvalidInputs(OrderServiceUnitTest.java:315)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></error>
    <system-out><![CDATA[14:52:27.695 [main] INFO  c.e.order.service.OrderServiceImpl - Starting order 1 with correlationId 2e8b7424-1e22-4e82-bb32-d8122c0e1d0a
]]></system-out>
  </testcase>
  <testcase name="shouldFailToProcessOrderWithInvalidInputs(Long, int, double, String)[3]" classname="com.example.order.service.OrderServiceUnitTest" time="0.005">
    <error message="Cannot invoke &quot;reactor.core.publisher.Mono.timeout(java.time.Duration)&quot; because the return value of &quot;com.example.order.service.SagaOrchestrator.executeOrderSaga(java.lang.Long, int, double, String)&quot; is null" type="java.lang.NullPointerException"><![CDATA[java.lang.NullPointerException: Cannot invoke "reactor.core.publisher.Mono.timeout(java.time.Duration)" because the return value of "com.example.order.service.SagaOrchestrator.executeOrderSaga(java.lang.Long, int, double, String)" is null
	at com.example.order.service.OrderServiceImpl.processOrder(OrderServiceImpl.java:43)
	at com.example.order.service.OrderServiceUnitTest.shouldFailToProcessOrderWithInvalidInputs(OrderServiceUnitTest.java:315)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:1024)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:276)
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></error>
    <system-out><![CDATA[14:52:27.701 [main] INFO  c.e.order.service.OrderServiceImpl - Starting order 1 with correlationId bf68488c-d43d-486c-94b5-13e829d58bca
]]></system-out>
  </testcase>
  <testcase name="shouldHandleRedisSuccessAfterRetries" classname="com.example.order.service.OrderServiceUnitTest" time="0.01">
    <error message="Cannot invoke &quot;org.reactivestreams.Publisher.subscribe(org.reactivestreams.Subscriber)&quot; because &quot;publisher&quot; is null" type="java.lang.NullPointerException"><![CDATA[java.lang.NullPointerException: Cannot invoke "org.reactivestreams.Publisher.subscribe(org.reactivestreams.Subscriber)" because "publisher" is null
	at reactor.test.DefaultStepVerifierBuilder$DefaultStepVerifier.toVerifierAndSubscribe(DefaultStepVerifierBuilder.java:891)
	at reactor.test.DefaultStepVerifierBuilder$DefaultStepVerifier.verify(DefaultStepVerifierBuilder.java:831)
	at reactor.test.DefaultStepVerifierBuilder$DefaultStepVerifier.verify(DefaultStepVerifierBuilder.java:823)
	at reactor.test.DefaultStepVerifierBuilder.verifyComplete(DefaultStepVerifierBuilder.java:690)
	at com.example.order.service.OrderServiceUnitTest.shouldHandleRedisSuccessAfterRetries(OrderServiceUnitTest.java:489)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></error>
    <system-out><![CDATA[14:52:27.712 [main] INFO  c.e.order.service.OrderServiceImpl - Publishing event: com.example.order.events.OrderCreatedEvent@238bee26
]]></system-out>
  </testcase>
  <testcase name="shouldPublishEventsDuringOrderProcessing" classname="com.example.order.service.OrderServiceUnitTest" time="0.005">
    <error message="&#10;Strict stubbing argument mismatch. Please check:&#10; - this invocation of &apos;executeOrderSaga&apos; method:&#10;    sagaOrchestrator.executeOrderSaga(&#10;    1L,&#10;    10,&#10;    100.0d,&#10;    &quot;fa7586c7-0963-4c30-8887-f076e793233a&quot;&#10;);&#10;    -&gt; at com.example.order.service.OrderServiceImpl.processOrder(OrderServiceImpl.java:42)&#10; - has following stubbing(s) with different arguments:&#10;    1. sagaOrchestrator.executeOrderSaga(&#10;    1L,&#10;    10,&#10;    100.0d,&#10;    &quot;7a80a655-600d-4421-9768-78887a5b9c9e&quot;&#10;);&#10;      -&gt; at com.example.order.service.OrderServiceUnitTest.shouldPublishEventsDuringOrderProcessing(OrderServiceUnitTest.java:228)&#10;Typically, stubbing argument mismatch indicates user mistake when writing tests.&#10;Mockito fails early so that you can debug potential problem easily.&#10;However, there are legit scenarios when this exception generates false negative signal:&#10;  - stubbing the same method multiple times using &apos;given().will()&apos; or &apos;when().then()&apos; API&#10;    Please use &apos;will().given()&apos; or &apos;doReturn().when()&apos; API for stubbing.&#10;  - stubbed method is intentionally invoked with different arguments by code under test&#10;    Please use default or &apos;silent&apos; JUnit Rule (equivalent of Strictness.LENIENT).&#10;For more information see javadoc for PotentialStubbingProblem class." type="org.mockito.exceptions.misusing.PotentialStubbingProblem"><![CDATA[org.mockito.exceptions.misusing.PotentialStubbingProblem: 

Strict stubbing argument mismatch. Please check:
 - this invocation of 'executeOrderSaga' method:
    sagaOrchestrator.executeOrderSaga(
    1L,
    10,
    100.0d,
    "fa7586c7-0963-4c30-8887-f076e793233a"
);
    -> at com.example.order.service.OrderServiceImpl.processOrder(OrderServiceImpl.java:42)
 - has following stubbing(s) with different arguments:
    1. sagaOrchestrator.executeOrderSaga(
    1L,
    10,
    100.0d,
    "7a80a655-600d-4421-9768-78887a5b9c9e"
);
      -> at com.example.order.service.OrderServiceUnitTest.shouldPublishEventsDuringOrderProcessing(OrderServiceUnitTest.java:228)
Typically, stubbing argument mismatch indicates user mistake when writing tests.
Mockito fails early so that you can debug potential problem easily.
However, there are legit scenarios when this exception generates false negative signal:
  - stubbing the same method multiple times using 'given().will()' or 'when().then()' API
    Please use 'will().given()' or 'doReturn().when()' API for stubbing.
  - stubbed method is intentionally invoked with different arguments by code under test
    Please use default or 'silent' JUnit Rule (equivalent of Strictness.LENIENT).
For more information see javadoc for PotentialStubbingProblem class.
	at com.example.order.service.SagaOrchestrator.executeOrderSaga(SagaOrchestrator.java:35)
	at com.example.order.service.OrderServiceImpl.processOrder(OrderServiceImpl.java:42)
	at com.example.order.service.OrderServiceUnitTest.shouldPublishEventsDuringOrderProcessing(OrderServiceUnitTest.java:231)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></error>
    <system-out><![CDATA[14:52:27.717 [main] INFO  c.e.order.service.OrderServiceImpl - Starting order 1 with correlationId fa7586c7-0963-4c30-8887-f076e793233a
]]></system-out>
  </testcase>
  <testcase name="shouldHandleMeterRegistryFailureDuringEventPublishing" classname="com.example.order.service.OrderServiceUnitTest" time="0.005">
    <error message="Cannot invoke &quot;org.reactivestreams.Publisher.subscribe(org.reactivestreams.Subscriber)&quot; because &quot;publisher&quot; is null" type="java.lang.NullPointerException"><![CDATA[java.lang.NullPointerException: Cannot invoke "org.reactivestreams.Publisher.subscribe(org.reactivestreams.Subscriber)" because "publisher" is null
	at reactor.test.DefaultStepVerifierBuilder$DefaultStepVerifier.toVerifierAndSubscribe(DefaultStepVerifierBuilder.java:891)
	at reactor.test.DefaultStepVerifierBuilder$DefaultStepVerifier.verify(DefaultStepVerifierBuilder.java:831)
	at reactor.test.DefaultStepVerifierBuilder$DefaultStepVerifier.verify(DefaultStepVerifierBuilder.java:823)
	at reactor.test.DefaultStepVerifierBuilder.verifyComplete(DefaultStepVerifierBuilder.java:690)
	at com.example.order.service.OrderServiceUnitTest.shouldHandleMeterRegistryFailureDuringEventPublishing(OrderServiceUnitTest.java:508)
	at java.base/java.lang.reflect.Method.invoke(Method.java:580)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
]]></error>
    <system-out><![CDATA[14:52:27.723 [main] INFO  c.e.order.service.OrderServiceImpl - Publishing event: com.example.order.events.OrderCreatedEvent@de61005
]]></system-out>
  </testcase>
</testsuite>