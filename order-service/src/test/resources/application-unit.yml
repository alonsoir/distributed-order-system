spring:
  main:
    allow-bean-definition-overriding: true
  r2dbc:
    url: r2dbc:h2:mem:///testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    username: sa
    password:
  data:
    redis:
      host: ${SPRING_DATA_REDIS_HOST:localhost}
      port: ${SPRING_DATA_REDIS_PORT:6379}
  sql:
    init:
      mode: never

management:
  endpoints:
    web:
      exposure:
        include: prometheus,health

redis:
  retry:
    max-attempts: ${REDIS_RETRY_MAX_ATTEMPTS:3}
    backoff:
      seconds: ${REDIS_RETRY_BACKOFF_SECONDS:1}
  stream:
    min-size: ${REDIS_STREAM_MIN_SIZE:100}
    max-size: ${REDIS_STREAM_MAX_SIZE:1000}
    default-size: ${REDIS_STREAM_DEFAULT_SIZE:500}
    trim:
      interval: ${REDIS_STREAM_TRIM_INTERVAL:10000}

outbox:
  retry:
    max-attempts: ${OUTBOX_RETRY_MAX_ATTEMPTS:3}
    backoff:
      seconds: ${OUTBOX_RETRY_BACKOFF_SECONDS:1}

dlq:
  retry:
    max-attempts: ${DLQ_RETRY_MAX_ATTEMPTS:3}
    backoff:
      seconds: ${DLQ_RETRY_BACKOFF_SECONDS:1}
  process:
    interval: ${DLQ_PROCESS_INTERVAL:10000}

event:
  persistence:
    topics:
      orders:
        persistToDisk: ${EVENT_PERSISTENCE_ORDERS_PERSIST_TO_DISK:true}
        importance: ${EVENT_PERSISTENCE_ORDERS_IMPORTANCE:HIGH}
      other-topic:
        persistToDisk: ${EVENT_PERSISTENCE_OTHER_TOPIC_PERSIST_TO_DISK:false}
        importance: ${EVENT_PERSISTENCE_OTHER_TOPIC_IMPORTANCE:LOW}

logging:
  level:
    org.springframework.boot: DEBUG
    org.springframework.test: DEBUG
    org.testcontainers: DEBUG
    com.redis.testcontainers: DEBUG

app:
  id:
    check-collisions: ${APP_ID_CHECK_COLLISIONS:true}  # Activado por defecto en pruebas unitarias
  node-id: ${APP_NODE_ID:0}