spring:
  main:
    allow-bean-definition-overriding: true
  r2dbc:
    url: ${SPRING_R2DBC_URL:r2dbc:mysql://localhost:3306/orders_stress}
    username: ${SPRING_R2DBC_USERNAME:root}
    password: ${SPRING_R2DBC_PASSWORD:root}
    pool:
      initial-size: ${SPRING_R2DBC_POOL_INITIAL_SIZE:10}
      max-size: ${SPRING_R2DBC_POOL_MAX_SIZE:50}
      max-idle-time: ${SPRING_R2DBC_POOL_MAX_IDLE_TIME:30m}
  data:
    redis:
      host: ${SPRING_REDIS_HOST:localhost}
      port: ${SPRING_REDIS_PORT:6379}
      lettuce:
        pool:
          max-active: ${SPRING_REDIS_POOL_MAX_ACTIVE:100}
          max-idle: ${SPRING_REDIS_POOL_MAX_IDLE:50}
          min-idle: ${SPRING_REDIS_POOL_MIN_IDLE:10}
  sql:
    init:
      mode: ${SPRING_SQL_INIT_MODE:never}

management:
  endpoints:
    web:
      exposure:
        include: prometheus,health,metrics,info
  metrics:
    export:
      prometheus:
        enabled: true
    distribution:
      percentiles-histogram:
        http.server.requests: true
        id.generation.time: true
      slo:
        http.server.requests: 50ms, 100ms, 200ms, 500ms
        id.generation.time: 1ms, 5ms, 10ms, 50ms

server:
  tomcat:
    threads:
      max: ${SERVER_TOMCAT_THREADS_MAX:200}
    max-connections: ${SERVER_TOMCAT_MAX_CONNECTIONS:1000}
    accept-count: ${SERVER_TOMCAT_ACCEPT_COUNT:100}

order:
  service:
    strategy:
      default-strategy: atLeastOnce

redis:
  retry:
    max-attempts: ${REDIS_RETRY_MAX_ATTEMPTS:3}
    backoff:
      seconds: ${REDIS_RETRY_BACKOFF_SECONDS:1}
  stream:
    min-size: ${REDIS_STREAM_MIN_SIZE:1000}
    max-size: ${REDIS_STREAM_MAX_SIZE:100000}
    default-size: ${REDIS_STREAM_DEFAULT_SIZE:10000}
    trim:
      interval: ${REDIS_STREAM_TRIM_INTERVAL:10000}

outbox:
  retry:
    max-attempts: ${OUTBOX_RETRY_MAX_ATTEMPTS:3}
    backoff:
      seconds: ${OUTBOX_RETRY_BACKOFF_SECONDS:1}

dlq:
  retry:
    max-attempts: ${DLQ_RETRY_MAX_ATTEMPTS:3}
    backoff:
      seconds: ${DLQ_RETRY_BACKOFF_SECONDS:1}
  process:
    interval: ${DLQ_PROCESS_INTERVAL:10000}

event:
  persistence:
    topics:
      orders:
        persistToDisk: ${EVENT_PERSISTENCE_ORDERS_PERSIST_TO_DISK:true}
        importance: ${EVENT_PERSISTENCE_ORDERS_IMPORTANCE:HIGH}
      other-topic:
        persistToDisk: ${EVENT_PERSISTENCE_OTHER_TOPIC_PERSIST_TO_DISK:false}
        importance: ${EVENT_PERSISTENCE_OTHER_TOPIC_IMPORTANCE:LOW}

logging:
  level:
    root: ${LOG_LEVEL_ROOT:INFO}
    com.example.order: ${LOG_LEVEL_APP:DEBUG}
    org.springframework: ${LOG_LEVEL_SPRING:INFO}
    org.springframework.r2dbc: ${LOG_LEVEL_R2DBC:INFO}
    io.micrometer: ${LOG_LEVEL_MICROMETER:DEBUG}

app:
  id:
    check-collisions: ${APP_ID_CHECK_COLLISIONS:true}  # Activado para detectar colisiones en pruebas de estr√©s
  node-id: ${APP_NODE_ID:0}  # Configurable para pruebas multi-nodo

resilience4j:
  fallback:
    enabled: true